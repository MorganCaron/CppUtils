export module CppUtils.UnitTests.Terminal.Canvas;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Terminal::Canvas
{
	inline auto _ = TestSuite{"Terminal/Canvas", {"UnitTest"}, [](auto& suite) {
		using namespace std::literals;
		using namespace std::chrono_literals;

		suite.addTest("Size", [&] {
			{
				auto canvas = CppUtils::Terminal::Canvas{CppUtils::Container::Size2{10, 5}};
				canvas.fill('/');
				canvas.update();
				std::this_thread::sleep_for(300ms);
			}
			{
				auto canvas = CppUtils::Terminal::Canvas{CppUtils::Container::Size2{16, 9}};
				canvas.fill('.');
				canvas.update();
				std::this_thread::sleep_for(300ms);
			}
			{
				auto canvas = CppUtils::Terminal::Canvas{};
				canvas.fill('#');
				canvas.update();
				std::this_thread::sleep_for(300ms);
			}
		});

		suite.addTest("Fill", [&] {
			auto canvas = CppUtils::Terminal::Canvas{CppUtils::Container::Size2{10, 5}};
			const auto chars = "-\\|/"sv;
			for (auto i = 0uz; i < 5; ++i)
				for (auto c : chars)
				{
					std::this_thread::sleep_for(100ms);
					canvas.fill(c);
					canvas.update();
				}
		});

		suite.addTest("Print", [&] {
			auto canvas = CppUtils::Terminal::Canvas{CppUtils::Container::Size2{10, 5}};
			canvas.fill('.');
			canvas.print(CppUtils::Container::Size2{1, 1}, "Hello World!");
			canvas.update();
		});

		suite.addTest("Progress bar", [&] {
			auto progressBar = CppUtils::Terminal::ProgressBar{"Progress bar"};
			for (auto i = 0uz; i <= 100; ++i)
			{
				progressBar.setPercent(i);
				std::this_thread::sleep_for(20ms);
			}
		});

		suite.addTest("Bouncing ball", [&] {
			const auto terminalSize = CppUtils::Terminal::getTerminalSize();
			auto canvasSize = terminalSize;
			canvasSize.height() = canvasSize.width() * 1 / 3;
			auto canvas = CppUtils::Terminal::Canvas{canvasSize};
			auto ballPosition = CppUtils::Container::Vec2<float>{};
			auto ballVelocity = CppUtils::Container::Vec2<float>{1.f, 1.f};
			auto charPosition = CppUtils::Container::Size2{};

			for (auto i = 0uz; i <= 500; ++i)
			{
				canvas.print(charPosition, ".");
				auto previousBallPosition = ballPosition;
				ballPosition += ballVelocity; // Energie cinétique
				ballVelocity *= .997f; // Frottements de l'air
				ballVelocity.y() += .05f; // Gravité

				for (const auto axis : {0uz, 1uz})
					if (const auto limit = static_cast<float>(canvasSize[axis]); ballPosition[axis] < 0.f or ballPosition[axis] > limit)
					{
						const auto total = ballPosition[axis] - previousBallPosition[axis];
						const auto over = ballPosition[axis] - std::clamp(ballPosition[axis], 0.f, limit);
						const auto ratio = 1.f - over / total;
						ballPosition = previousBallPosition + ballVelocity * ratio;
						previousBallPosition = ballPosition - ballVelocity * (1.0f - ratio);
						ballVelocity[axis] = -ballVelocity[axis];
						ballPosition += ballVelocity * (1.f - ratio);
						ballVelocity[axis] *= .75f; // Friction
						if (std::abs(ballVelocity[axis]) < .1f)
							ballVelocity[axis] = 0.f; // Immobilisation par frottements
					}

				charPosition.x() = static_cast<std::size_t>(std::roundf(ballPosition.x()));
				charPosition.y() = static_cast<std::size_t>(std::roundf(ballPosition.y()));
				canvas.print(charPosition, "O");

				canvas.update();
				std::this_thread::sleep_for(10ms);
			}
		});
	}};
}
