export module CppUtils.UnitTests.FileSystem.Watcher;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::FileSystem::Watcher
{
	inline auto _ = TestSuite{"FileSystem/Watcher", [](auto& suite) {
		using namespace std::chrono_literals;
		using Logger = CppUtils::Logger<"CppUtils">;

		suite.addTest("No file", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(directory / "test.tmp");
				watcher.onEvent(
					[&suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					suite.expect(false);
				});
				std::this_thread::sleep_for(10ms);
			}};
		});

		suite.addTest("No event", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto filePath = directory / "test.tmp";
				CppUtils::FileSystem::String::write(filePath, "Hello World!");

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(filePath);
				watcher.onEvent(
					[&suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					suite.expect(false);
				});
				std::this_thread::sleep_for(10ms);
			}};
		});

		suite.addTest("Unwatch", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[](const auto& directory) -> void {
				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(directory);
				watcher.unwatch(directory);
			}};
		});

		suite.addTest("Watch file creation", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto eventsTriggered = 0uz;

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(directory);
				watcher.onEvent(
					[](CppUtils::FileSystem::Event event,
						const std::filesystem::path& filePath) -> void {
					Logger::print("{}: {}\n", event, filePath.string());
				});
				watcher.onEvent(CppUtils::FileSystem::Event::Created,
					[&eventsTriggered, &suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					++eventsTriggered;
					suite.expectEqual(event, CppUtils::FileSystem::Event::Created);
				});

				std::this_thread::sleep_for(10ms);
				CppUtils::FileSystem::String::write(directory / "test.tmp", "Hello World!");
				std::this_thread::sleep_for(10ms);

				suite.expectEqual(eventsTriggered, 1uz);
			}};
		});

		suite.addTest("Watch file modification", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto eventsTriggered = 0uz;
				auto filePath = directory / "test.tmp";
				CppUtils::FileSystem::String::write(filePath, "Foo");

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(filePath);
				watcher.onEvent(
					[](CppUtils::FileSystem::Event event,
						const std::filesystem::path& filePath) -> void {
					Logger::print("{}: {}\n", event, filePath.string());
				});
				watcher.onEvent(CppUtils::FileSystem::Event::Modified,
					[&eventsTriggered, &suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					++eventsTriggered;
					suite.expectEqual(event, CppUtils::FileSystem::Event::Modified);
				});

				std::this_thread::sleep_for(10ms);
				CppUtils::FileSystem::String::write(filePath, "Bar");
				std::this_thread::sleep_for(10ms);

				suite.expectEqual(eventsTriggered, 1uz);
			}};
		});

		suite.addTest("Watch file deletion", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto eventsTriggered = 0uz;
				auto filePath = directory / "test.tmp";
				CppUtils::FileSystem::String::write(filePath, "Hello World!");

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(filePath);
				watcher.onEvent(
					[](CppUtils::FileSystem::Event event,
						const std::filesystem::path& filePath) -> void {
					Logger::print("{}: {}\n", event, filePath.string());
				});
				watcher.onEvent(CppUtils::FileSystem::Event::DeletedSelf,
					[&eventsTriggered, &suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					++eventsTriggered;
					suite.expectEqual(event, CppUtils::FileSystem::Event::DeletedSelf);
				});

				std::this_thread::sleep_for(10ms);
				std::filesystem::remove(filePath);
				std::this_thread::sleep_for(10ms);

				suite.expectEqual(eventsTriggered, 1uz);
			}};
		});

		suite.addTest("Watch directory creation", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto eventsTriggered = 0uz;

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(directory);
				watcher.onEvent(
					[](CppUtils::FileSystem::Event event,
						const std::filesystem::path& filePath) -> void {
					Logger::print("{}: {}\n", event, filePath.string());
				});
				watcher.onEvent(CppUtils::FileSystem::Event::Created,
					[&eventsTriggered, &suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					++eventsTriggered;
					suite.expectEqual(event, CppUtils::FileSystem::Event::Created);
				});

				std::this_thread::sleep_for(10ms);
				CppUtils::FileSystem::String::write(directory / "test.tmp", "Hello World!");
				std::this_thread::sleep_for(10ms);

				suite.expectEqual(eventsTriggered, 1uz);
			}};
		});

		suite.addTest("Watch directory modification", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto eventsTriggered = 0uz;
				auto filePath = directory / "test.tmp";
				CppUtils::FileSystem::String::write(filePath, "Foo");

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(directory);
				watcher.onEvent(
					[](CppUtils::FileSystem::Event event,
						const std::filesystem::path& filePath) -> void {
					Logger::print("{}: {}\n", event, filePath.string());
				});
				watcher.onEvent(CppUtils::FileSystem::Event::Modified,
					[&eventsTriggered, &suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					++eventsTriggered;
					suite.expectEqual(event, CppUtils::FileSystem::Event::Modified);
				});

				std::this_thread::sleep_for(10ms);
				CppUtils::FileSystem::String::write(filePath, "Bar");
				std::this_thread::sleep_for(10ms);

				suite.expectEqual(eventsTriggered, 1uz);
			}};
		});

		suite.addTest("Watch directory deletion", [&] {
			CppUtils::FileSystem::TemporaryDirectory{[&suite](const auto& directory) -> void {
				auto eventsTriggered = 0uz;
				auto filePath = directory / "test.tmp";
				CppUtils::FileSystem::String::write(filePath, "Hello World!");

				auto watcher = CppUtils::FileSystem::Watcher{};
				watcher.watch(directory);
				watcher.onEvent(
					[](CppUtils::FileSystem::Event event,
						const std::filesystem::path& filePath) -> void {
					Logger::print("{}: {}\n", event, filePath.string());
				});
				watcher.onEvent(CppUtils::FileSystem::Event::DeletedSelf,
					[&eventsTriggered, &suite](
						[[maybe_unused]] CppUtils::FileSystem::Event event,
						[[maybe_unused]] const std::filesystem::path& filePath) -> void {
					++eventsTriggered;
					suite.expectEqual(event, CppUtils::FileSystem::Event::DeletedSelf);
				});

				std::this_thread::sleep_for(10ms);
				std::filesystem::remove(filePath);
				std::this_thread::sleep_for(10ms);

				suite.expectEqual(eventsTriggered, 1uz);
			}};
		});
	}};
}
