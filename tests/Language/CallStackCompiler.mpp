export module CppUtils.UnitTests.Language.CallStackCompiler;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Language::CallStackCompiler
{
	inline auto _ = TestSuite{
		"Language/CallStackCompiler", []([[maybe_unused]] auto& suite) {
		using namespace std::literals;
		using Logger = CppUtils::Logger<"CppUtils">;
		namespace VM = CppUtils::Language::VirtualMachine;
		namespace Compiler = CppUtils::Language::CallStackCompiler;

		suite.addTest("empty source", [&] {
			constexpr auto source = u"§{X}"sv;
			auto output = Compiler::compile(source);
			Logger::print("Output:\n{}\n", CppUtils::String::toAscii(output));

			auto executionResult = VM::execute<std::size_t>(output);
			suite.expectEqual(executionResult, std::size_t{0}); // Todo: ""uz (not supported on MSVC)
		});

		suite.addTest("one function", [&] {
			constexpr auto source = uR"(
				(21X

				main §{
					42X
				}

				(22X
				)"sv;
			auto output = Compiler::compile(source);
			Logger::print("Output:\n{}\n", CppUtils::String::toAscii(output));

			auto executionResult = VM::execute<std::size_t>(output);
			suite.expectEqual(executionResult, std::size_t{42}); // Todo: ""uz (not supported on MSVC)
		});

		suite.addTest("comment", [&] {
			constexpr auto source = uR"(
					main §{
						4
						# Comment: (),+-*/%=<>!:;?§¤@\1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ
						2X
					}
				)"sv;
			auto output = Compiler::compile(source);
			Logger::print("Output:\n{}\n", CppUtils::String::toAscii(output));

			auto executionResult = VM::execute<std::size_t>(output);
			suite.expectEqual(executionResult, std::size_t{42}); // Todo: ""uz (not supported on MSVC)
		});

		suite.addTest("call function", [&] { // constexpr { (not supported on MSVC)
			constexpr auto source = uR"(
				(21X

				main §{
					# Call return40 function
					(: (11@ # <- return 40

					# Add 2
					(0, 2, 0+
					X
				}

				(22X

				return40 §{
					40
				}

				(23X
				)"sv;
			auto output = Compiler::compile(source);
			Logger::print("Output:\n{}\n", CppUtils::String::toAscii(output));

			auto executionResult = VM::execute<std::size_t>(output);
			suite.expectEqual(executionResult, std::size_t{42}); // Todo: ""uz (not supported on MSVC)
		});
	}};
}
