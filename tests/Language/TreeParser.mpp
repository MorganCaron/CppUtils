export module CppUtils.UnitTests.Language.TreeParser;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Language::TreeParser
{
	inline auto _ = TestSuite{"Language/TreeParser", [](auto& suite) {
		using namespace std::literals;
		using namespace CppUtils::String::Literals;
		using Logger = CppUtils::Logger<"CppUtils">;
		namespace Compiler = CppUtils::Language::TreeParser;
		using AST = CppUtils::Container::AST<>;
		using Node = CppUtils::Container::ASTNode<>;

		suite.addTest("Empty source", [&] {
			constexpr auto source = ""sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token},
				String::makeHashTable<char>("root")};
			suite.expectEqual(tree, expected);
		});
		/*
		suite.addTest("Single node", [&] {
			constexpr auto source = "node"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"node"_token}}},
				String::makeHashTable<char>("root", "node")};
			suite.expectEqual(tree, expected);
		});

		suite.addTest("Whitespaces", [&] {
			constexpr auto source = uR"(
				node
			)"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"node"_token}}},
				String::makeHashTable("root", "node")};
			suite.expectEqual(tree, expected);
		});

		suite.addTest("Multiple nodes", [&] {
			constexpr auto source = u"foo bar"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"foo"_token}, Node{"bar"_token}}},
				String::makeHashTable("root", "foo", "bar")};
			suite.expectEqual(tree, expected);
		});

		suite.addTest("Escaped chars", [&] {
			constexpr auto source = uR"(
				Hello\ World!
			)"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"Hello World!"_token}}},
				String::makeHashTable("root", "Hello World!")};
			suite.expectEqual(tree, expected);
		});

		suite.addTest("Empty node", [&] {
			constexpr auto source = u"node{}"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"node"_token}}},
				String::makeHashTable("root", "node")};
			suite.expectEqual(tree, expected);
		});

		suite.addTest("Node with content", [&] {
			constexpr auto source = u"parent{child0 child1}"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"parent"_token, {Node{"child0"_token}, Node{"child1"_token}}}}},
				String::makeHashTable("root", "parent", "child0", "child1")};
			suite.expectEqual(tree, expected);
		});

		suite.addTest("Nested nodes", [&] {
			constexpr auto source = uR"(
				main{
					print{ string{Hello\ World} }
				}
			)"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}", tree);
			auto expected = AST{
				Node{"root"_token, {Node{"main"_token, {Node{"print"_token, {Node{"Hello World"_token}}}}}}},
				String::makeHashTable("root", "print", "Hello World!")};
			suite.expectEqual(tree, expected);
		});
		*/
	}};
}
