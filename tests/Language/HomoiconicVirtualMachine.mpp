export module CppUtils.UnitTests.Language.HomoiconicVirtualMachine;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Language::Homoiconic
{
	inline auto _ = TestSuite{
		"Language/Homoiconic/VirtualMachine",
		{"Logger", "Container/Tree", "String/Utility"},
		[](auto& suite) {
		using namespace std::literals;
		using namespace CppUtils::String::Literals;
		using Logger = CppUtils::Logger<"CppUtils">;

		suite.addTest("Empty source", [&] {
			constexpr auto source = ""sv;

			auto virtualMachine = CppUtils::Language::Homoiconic::VirtualMachine<CppUtils::Language::Homoiconic::printInstruction>{};
			auto result = virtualMachine.execute<
				CppUtils::Language::Homoiconic::executeInstruction,
				CppUtils::Language::Homoiconic::advanceCursor>(CppUtils::Language::Cursor{source});

			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
			suite.expectEqual(virtualMachine.context.rootAst, CppUtils::Language::Homoiconic::Context{}.rootAst);
		});
	}};
}
