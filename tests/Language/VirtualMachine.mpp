export module CppUtils.UnitTests.Language.VirtualMachine;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Language::VirtualMachine
{
	inline auto _ = TestSuite{
		"Language/VirtualMachine",
		{"Logger", "Container/Stack"},
		[](auto& suite) {
		using namespace std::literals;
		using Logger = CppUtils::Logger<"CppUtils">;
		namespace VM = CppUtils::Language::VirtualMachine;

		suite.addTest("empty source", [&] {
			constexpr auto source = u8""sv;
			auto result = VM::execute(source);
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("push-pop size_t", [&] {
			constexpr auto source = u8",[,],"sv;
			auto result = VM::execute(source);
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("push-pop bool", [&] {
			constexpr auto source = u8",[0:,[0_,"sv;
			auto result = VM::execute<bool>(source);
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("push-pop char", [&] {
			constexpr auto source = u8",[0:,[0_,"sv;
			auto result = VM::execute<char>(source);
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("push-pop int", [&] {
			constexpr auto source = u8",[0:,[0_,"sv;
			auto result = VM::execute<int>(source);
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("import int", [&] {
			constexpr auto source = u8R"(,[0",)"sv;
			auto number = 42;
			auto result = VM::execute(source, VM::NoFunctions{}, VM::makeReferences(number));
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("input output (int)", [&] {
			constexpr auto source = u8R"([0" [1^ [0~)"sv;
			auto input = 42;
			auto output = 0;
			auto result = VM::execute(source, VM::NoFunctions{}, VM::makeReferences(input, output));
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
			suite.expectEqual(output, input);
		});

		suite.addTest("input output (char)", [&] {
			constexpr auto source = u8R"([0" [1^ [0~)"sv;
			auto input = 'A';
			auto output = char{};
			auto result = VM::execute(source, VM::NoFunctions{}, VM::makeReferences(input, output));
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
			suite.expectEqual(output, input);
		});

		suite.addTest("Call function: () -> std::size_t", [&] {
			constexpr auto source = u8R"(
			[ ()[0; / number = getNumber();
			[0^] / output = number;
			)"sv;
			auto getNumber = []() -> std::size_t {
				return 42uz;
			};
			auto output = 0uz;
			auto result = VM::execute(source, VM::Functions{getNumber}, VM::makeReferences(output));
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
			suite.expectEqual(output, 42uz);
		});

		suite.addTest("Call function: (std::size_t) -> void", [&] {
			constexpr auto source = u8R"(
				[42 ()[0; / print(42)
				)"sv;
			auto print = [](std::size_t number) -> void {
				std::println("{}", number);
			};
			auto result = VM::execute(source, VM::Functions{print});

			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("Call function: (std::size_t, std::size_t) -> std::size_t", [&] {
			constexpr auto source = u8R"(
			[ [30 [12 ()[0; ]] ()[1; [0^] / print(30 + 12);
			)"sv;
			auto add = [](std::size_t lhs, std::size_t rhs) -> std::size_t {
				return lhs + rhs;
			};
			auto print = [](std::size_t number) -> void {
				std::println("{}", number);
			};
			auto output = 0uz;
			auto result = VM::execute(source, VM::Functions{add, print}, VM::makeReferences(output));
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
			suite.expectEqual(output, 42uz);
		});

		suite.addTest("Labels", [&] {
			constexpr auto source = u8R"(
			@

			@{.main#<@} / def main
				[ [30 [12 ()[0; ]] ()[1; ] / print(30 + 12);
			*

			@{.main#>*} / main();
			)"sv;
			auto add = [](std::size_t lhs, std::size_t rhs) -> std::size_t {
				return lhs + rhs;
			};
			auto print = [](std::size_t number) -> void {
				std::println("{}", number);
			};
			auto result = VM::execute(source, VM::Functions{add, print});
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
		});

		suite.addTest("Return value", [&] {
			constexpr auto source = u8R"(
			@

			@{.add#<@} / def add
				)[0; / return lhs + rhs;
			*

			@{.print#<@} / def print
				)[1; / print(std::size_t);
			*

			@{.main#<@} / def main
				[ [30 [12 ( {.add#>*} ]] / a = 30 + 12;
				( {.print#>*} / print(a);
				[0^ ] / return a;
			*

			@{.main#>*} / main();
			)"sv;
			auto add = [](std::size_t lhs, std::size_t rhs) -> std::size_t {
				return lhs + rhs;
			};
			auto print = [](std::size_t number) -> void {
				std::println("{}", number);
			};
			auto output = 0uz;
			auto result = VM::execute(source, VM::Functions{add, print}, VM::makeReferences(output));
			if (not result)
				Logger::print<"error">("{}", result.error());
			suite.expect(result.has_value());
			suite.expectEqual(output, 42uz);
		});
		/*
		suite.addTest("equal", [&] {
			{
				constexpr auto source = u8"(:0, 2:42, 0, 2:42, 0="sv;
				constexpr auto result = VM::execute<bool, std::size_t, int>(source);
				suite.expect(result);
			}
			{
				constexpr auto source = u8"(:0, 2:42, 0, 2:21, 0="sv;
				constexpr auto result = VM::execute<bool, std::size_t, int>(source);
				suite.expect(!result);
			}
		});

		suite.addTest("and", [&] {
			{
				constexpr auto source = u8"(:1, 0, 0:1, 0&"sv;
				constexpr auto result = VM::execute<bool, std::size_t>(source);
				suite.expect(result);
			}
			{
				constexpr auto source = u8"(:0, 0, 0:1, 0&"sv;
				constexpr auto result = VM::execute<bool, std::size_t>(source);
				suite.expect(!result);
			}
		});

		suite.addTest("or", [&] {
			{
				constexpr auto source = u8"(:0, 0, 0:1, 0|"sv;
				constexpr auto result = VM::execute<bool, std::size_t>(source);
				suite.expect(result);
			}
			{
				constexpr auto source = u8"(:0, 0, 0:0, 0|"sv;
				constexpr auto result = VM::execute<bool, std::size_t>(source);
				suite.expect(!result);
			}
		});

		suite.addTest("xor", [&] {
			{
				constexpr auto source = u8"(:0, 0, 0:1, 0^"sv;
				constexpr auto result = VM::execute<bool, std::size_t>(source);
				suite.expect(result);
			}
			{
				constexpr auto source = u8"(:1, 0, 0:1, 0^"sv;
				constexpr auto result = VM::execute<bool, std::size_t>(source);
				suite.expect(!result);
			}
		});

		suite.addTest("external prvalue", [&] {
			constexpr auto source = u8"(:0, 1;"sv;
			constexpr auto result = VM::execute<int, std::size_t>(source, 42);
			suite.expectEqual(result, 42);
		});

		suite.addTest("external lvalue", [&] {
			constexpr auto source = u8"(:0, 1;"sv;
			constexpr auto number = 42;
			constexpr auto result = VM::execute<int, std::size_t>(source, number);
			suite.expectEqual(result, number);
		});

		suite.addTest("external pointer", [&] {
			constexpr auto source = u8"(:0, 1;R"sv;
			constexpr auto number = 42;
			auto result = VM::execute<int, std::size_t, const int*>(source, &number);
			suite.expectEqual(result, number);
		});

		suite.addTest("external lambda", [&] {
			constexpr auto source = u8"(:0, 1;"sv;
			static constexpr auto function = []() -> int { return 42; };
			constexpr auto result = VM::execute<int, std::size_t>(source, +function);
			suite.expectEqual(result, function());
		});

		suite.addTest("external function", [&] {
			constexpr auto source = u8"(0, 1;, 2;)"sv;
			constexpr auto input = u8"Hello World!"sv;
			auto result = VM::execute<std::size_t, std::u8string_view>(source, input, std::size<decltype(input)>);
			suite.expectEqual(result, std::size(input));
		});

		suite.addTest("external member function", [&] {
			constexpr auto source = u8"(0, 1;, 2;)"sv;
			constexpr auto input = u8"Hello World!"sv;
			auto result = VM::execute<std::size_t, const std::u8string_view*>(source, &input, &std::u8string_view::size);
			suite.expectEqual(result, std::size(input));
		});

		suite.addTest("conditional (false, direct) jump (direct, relative)", [&] {
			constexpr auto source = u8"(: (0, 0, 4, 0? 42X 21"sv;
			constexpr auto result = VM::execute<int, std::size_t>(source);
			suite.expectEqual(result, 42);
		});

		suite.addTest("copy", [&] {
			constexpr auto source = u8R"(
				(0
					(21, 0
					(: (2, 2, 0, 2C, 0
					+
				)"sv;
			constexpr auto result = VM::execute<std::size_t>(source);
			suite.expectEqual(result, 42uz);
		});

		suite.addTest("cast", [&] {
			constexpr auto source = u8"(:, 1:42, 0, 2, 1, 2C)"sv;
			constexpr auto result = VM::execute<bool, std::size_t>(source);
			suite.expect(result);
		});

		suite.addTest("swap 1", [&] {
			constexpr auto source = u8"(0:42, 1:0S"sv;
			auto result = VM::execute<std::size_t, bool>(source);
			suite.expectEqual(result, 42uz);
		});

		suite.addTest("swap 2", [&] {
			constexpr auto source = u8"(1:0, 0:42S)"sv;
			auto result = VM::execute<std::size_t, bool>(source);
			suite.expectEqual(result, 42uz);
		});

		suite.addTest("test loops", [&] {
			constexpr auto source = u8R"(
				(1; get nb
					(0, 1, 0+ plus one
				P position for loop
					(0:
						(0, 0, 0, 2C copy nb
						(0, 1, 0- minus one
						(0, 2, 0, 0C copy nb
						, 0, 4, 0? (0X quit if nb equal zero
					(2;, 3;) print input
					(0, 7J goto position for loop
				)"sv;

			constexpr auto nb = 3uz;

			constexpr auto input = "Hello World!"sv;

			static constexpr auto print = [](std::string_view text) -> void {
				Logger::print("{}\n", text);
			};

			auto result = VM::execute<std::size_t, bool, std::string_view>(source, nb, input, +print);
			suite.expectEqual(result, 0uz);
		});

		suite.addTest("char16_t", [&] {
			constexpr auto source = uR"(
				(: (1:\¤, 0, 1:\§, 0=
				)"sv;
			auto executionResult = VM::execute<bool, decltype(source)::value_type, std::size_t>(source);

			suite.expect(u"¤"sv != u"§"sv);
			suite.expectEqual(executionResult, false);
		});
		*/
	}};
}
