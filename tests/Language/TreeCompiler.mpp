export module CppUtils.UnitTests.Language.TreeCompiler;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Language::TreeCompiler
{
	inline auto _ = TestSuite{"Language/TreeCompiler", []([[maybe_unused]] auto& suite) {
		using namespace std::literals;
		using Logger = CppUtils::Logger<"CppUtils">;
		namespace Compiler = CppUtils::Language::TreeCompiler;
		using TreeNode = CppUtils::Container::TokenTree::Node;

		suite.addTest("Empty source", [&] {
			constexpr auto source = u""sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Single node", [&] {
			constexpr auto source = u"node"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Whitespaces", [&] {
			constexpr auto source = uR"(
				node
				)"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Multiple nodes", [&] {
			constexpr auto source = u"foo bar"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Escaped chars", [&] {
			constexpr auto source = uR"(
				Hello\ World!
			)"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Empty node", [&] {
			constexpr auto source = u"node{}"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Node with content", [&] {
			constexpr auto source = u"parent{child0 child1}"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});

		suite.addTest("Nested nodes", [&] {
			constexpr auto source = uR"(
				main{
					print{ string{Hello\ World\ \0} }
				}
			)"sv;
			auto tree = Compiler::compile(source);
			Logger::print("Tree:\n{}\n", tree);
			suite.expectEqual(tree.root, TreeNode{});
		});
	}};
}
