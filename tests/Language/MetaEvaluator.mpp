export module CppUtils.UnitTests.Language.MetaEvaluator;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Language::MetaEvaluator
{
	inline auto _ = TestSuite{
		"Language/MetaEvaluator",
		{"Logger", "Container/Tree"},
		[](auto& suite) {
		using namespace std::literals;
		using namespace CppUtils::String::Literals;
		using Logger = CppUtils::Logger<"CppUtils">;
		using MetaEvaluator = CppUtils::Language::MetaEvaluator;
		using Cursor = CppUtils::Language::MetaEvaluator::Cursor;
		using ASTNode = CppUtils::Language::ASTNode;

		suite.addTest("Empty source", [&] {
			auto interpreter = MetaEvaluator{};
			constexpr auto source = ""sv;
			auto cursor = Cursor{source};

			auto result = interpreter(cursor);
			if (not result)
				Logger::print<"error">("Error: {}\nPosition: {}\nChar: '{}'", result.error(), cursor.position, cursor.getCurrent());

			suite.expect(result.has_value());
			suite.expectEqual(std::size(interpreter.getScope().nodes), 1uz);
		});

		suite.addTest("Call function", [&] {
			auto interpreter = MetaEvaluator{};
			constexpr auto source = ""sv;
			auto cursor = Cursor{source};

			interpreter.functions["test"_token] = [](Cursor&, const ASTNode&, MetaEvaluator& context) -> std::expected<void, std::string_view> {
				auto& scopeNodes = context.getScope().nodes;
				scopeNodes.emplace_back(42uz);
				return {};
			};
			// clang-format off
			interpreter.rootAst = {0uz, {
				ASTNode{"main"_token, {
					ASTNode{"call"_token, {ASTNode{"test"_token}}}
				}}
			}};
			// clang-format on
			auto result = interpreter(cursor);
			if (not result)
				Logger::print<"error">("Error: {}\nPosition: {}\nChar: '{}'", result.error(), cursor.position, cursor.getCurrent());

			suite.expect(result.has_value());
			const auto& scopeNodes = interpreter.getScope().nodes;
			suite.expectEqual(std::size(scopeNodes), 2uz);
			suite.expectEqual(scopeNodes.at(0).value, "main"_token);
			suite.expectEqual(scopeNodes.at(1).value, 42uz);
		});

		suite.addTest("Call lexeme", [&] {
			auto interpreter = MetaEvaluator{};
			constexpr auto source = ""sv;
			auto cursor = Cursor{source};

			interpreter.functions["test"_token] = [](Cursor&, const ASTNode&, MetaEvaluator& context) -> std::expected<void, std::string_view> {
				auto& scopeNodes = context.getScope().nodes;
				scopeNodes.emplace_back(42uz);
				return {};
			};
			// clang-format off
			interpreter.rootAst = {0uz, {
				ASTNode{"main"_token, {
					ASTNode{"test"_token}
				}},
				ASTNode{"test"_token, {
					ASTNode{"call"_token, {ASTNode{"test"_token}}}
				}}
			}};
			// clang-format on
			auto result = interpreter(cursor);
			if (not result)
				Logger::print<"error">("Error: {}\nPosition: {}\nChar: '{}'", result.error(), cursor.position, cursor.getCurrent());

			suite.expect(result.has_value());
			const auto& scopeNodes = interpreter.getScope().nodes;
			suite.expectEqual(std::size(scopeNodes), 3uz);
			suite.expectEqual(scopeNodes.at(0).value, "main"_token);
			suite.expectEqual(scopeNodes.at(1).value, static_cast<String::Token>("test"_token));
			suite.expectEqual(scopeNodes.at(2).value, 42uz);
		});
	}};
}
