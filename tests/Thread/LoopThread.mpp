export module CppUtils.UnitTests.Thread.LoopThread;

import CppUtils;

export namespace CppUtils::UnitTest::Thread::LoopThread
{
	inline auto _ = CppUtils::UnitTest::TestSuite{"Thread/LoopThread", [](auto& suite) {
		using namespace std::chrono_literals;

		suite.addTest("isRunning", [&] {
			auto loopThread = CppUtils::Thread::LoopThread{[] {}};
			suite.expect(not loopThread.isRunning());
			loopThread.start();
			suite.expect(loopThread.isRunning());
			loopThread.stop();
			suite.expect(not loopThread.isRunning());
			loopThread.start();
			suite.expect(loopThread.isRunning());
		});

		suite.addTest("Loop", [&] {
			auto lockedNumber = CppUtils::Thread::Locked{std::size_t{0}}; // Todo: ""uz (not supported on MSVC)
			{
				auto loopThread = CppUtils::Thread::LoopThread{[&lockedNumber] {
					auto accessor = lockedNumber.access();
					auto& nb = *accessor;
					++nb;
					std::this_thread::sleep_for(10ms);
				}};
				loopThread.start();
				std::this_thread::sleep_for(100ms);
			}
			auto accessor = lockedNumber.access();
			auto nb = *accessor;
			suite.expectEqual(nb, std::size_t{10}); // Todo: ""uz (not supported on MSVC)
		});
	}};
}
