export module CppUtils.UnitTests.Thread.UniqueLocker;

import CppUtils;

export namespace CppUtils::UnitTest::Thread::UniqueLocker
{
	inline auto _ = CppUtils::UnitTest::TestSuite{"Thread/UniqueLocker", {"UnitTest"}, [](auto& suite) {
		suite.addTest("Access", [&] {
			auto lockedString = CppUtils::Thread::UniqueLocker<std::string>{"Test"};
			auto accessor = lockedString.access();
			suite.expect(accessor.value() == "Test");
		});

		suite.addTest("Test mutex", [&] {
			auto lockedNumber = CppUtils::Thread::UniqueLocker{0uz};

			auto incrementFunction = [&lockedNumber](std::size_t iterations) noexcept -> void {
				while (iterations--)
				{
					auto accessor = lockedNumber.access();
					auto& nb = accessor.value();
					++nb;
				}
			};

			auto iterations = 1'000'000uz;
			{
				auto thread0 = std::jthread{incrementFunction, iterations};
				auto thread1 = std::jthread{incrementFunction, iterations};
			}
			auto accessor = lockedNumber.access();
			suite.expectEqual(accessor.value(), iterations * 2);
		});

		suite.addTest("Const access", [&] {
			const auto constLockedString = CppUtils::Thread::UniqueLocker<std::string>{"Test"};
			auto accessor = constLockedString.access();
			suite.expect(accessor.value() == "Test");
		});

		suite.addTest("Const& access", [&] {
			const auto& constLockedString = CppUtils::Thread::UniqueLocker<std::string>{"Test"};
			auto accessor = constLockedString.access();
			suite.expect(accessor.value() == "Test");
		});

		suite.addTest("Const&& access", [&] {
			const auto&& constLockedString = CppUtils::Thread::UniqueLocker<std::string>{"Test"};
			auto accessor = constLockedString.access();
			suite.expect(accessor.value() == "Test");
		});

		suite.addTest("MultipleAccessor", [&] {
			auto lockedString1 = CppUtils::Thread::UniqueLocker<std::string>{"Foo"};
			auto lockedString2 = CppUtils::Thread::UniqueLocker<std::string>{"Bar"};
			{
				auto accessor = CppUtils::Thread::MultipleAccessor{lockedString1, lockedString2};
				suite.expect(std::get<0>(accessor.values) == "Foo");
				suite.expect(std::get<1>(accessor.values) == "Bar");
			}
		});
	}};
}
