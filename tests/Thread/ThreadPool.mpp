export module CppUtils.UnitTests.Thread.ThreadPool;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Thread::ThreadPool
{
	inline auto _ = CppUtils::UnitTest::TestSuite{"Thread/ThreadPool", {"UnitTest"}, [](auto& suite) {
		suite.addTest("0 task / 1 thread", [&] {
			auto _ = CppUtils::Thread::ThreadPool{1};
		});

		suite.addTest("0 task / 2 threads", [&] {
			auto _ = CppUtils::Thread::ThreadPool{2};
		});

		suite.addTest("0 task / N threads", [&] {
			auto _ = CppUtils::Thread::ThreadPool{};
		});

		suite.addTest("1 task with future.wait()", [&] {
			auto called = std::atomic_bool{false};
			{
				auto threadPool = CppUtils::Thread::ThreadPool{};
				auto future = threadPool.call([&called] {
					called = true;
				});
				future.wait();
			}
			suite.expect(called);
		});

		suite.addTest("1 task without future.wait()", [&] {
			auto called = std::atomic_bool{false};
			{
				auto threadPool = CppUtils::Thread::ThreadPool{};
				auto future = threadPool.call([&called] {
					called = true;
				});
			}
			suite.expect(called);
		});
	}};
}
