export module CppUtils.UnitTests.Thread.Locked;

import CppUtils;

export namespace CppUtils::UnitTests::Thread::Locked
{
	inline auto _ = CppUtils::UnitTest::TestSuite{"Lock", [](auto& suite) {
		suite.addTest("Access", [&] {
			auto lockedString = CppUtils::Thread::Locked<std::string>{"Foo"};
			{
				auto accessor = lockedString.access();
				suite.expect(*accessor == "Foo");
			}
		});

		suite.addTest("Test mutex", [&] {
			auto lockedNumber = CppUtils::Thread::Locked{std::size_t{0}}; // Todo: ""uz (not supported on MSVC)

			auto incrementFunction = [&lockedNumber](std::size_t iterations) noexcept -> void {
				while (iterations--)
				{
					auto accessor = lockedNumber.access();
					auto& nb = *accessor;
					++nb;
				}
			};

			auto iterations = std::size_t{1'000'000}; // Todo: ""uz (not supported on MSVC)
			{
				auto thread0 = std::jthread{incrementFunction, iterations};
				auto thread1 = std::jthread{incrementFunction, iterations};
			}
			auto accessor = lockedNumber.access();
			suite.expectEqual(*accessor, iterations * 2);
		});
	}};
}
