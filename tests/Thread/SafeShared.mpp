export module CppUtils.UnitTests.Thread.SafeShared;

import CppUtils;

export namespace CppUtils::UnitTest::Thread::SafeShared
{
	inline auto _ = CppUtils::UnitTest::TestSuite{"Thread/SafeShared", {"UnitTest", "Thread/SharedLocker"}, [](auto& suite) {
		suite.addTest("Unique access", [&] {
			auto safeSharedString0 = CppUtils::Thread::SafeShared<std::string>{"Foo"};
			auto safeSharedString1 = safeSharedString0;
			{
				auto accessor = safeSharedString0.uniqueAccess();
				suite.expect(accessor.value() == "Foo");
				accessor.value() = "Bar";
				suite.expect(accessor.value() == "Bar");
			}
			{
				auto accessor = safeSharedString1.uniqueAccess();
				suite.expect(accessor.value() == "Bar");
			}
		});

		suite.addTest("Shared access", [&] {
			auto safeSharedString0 = CppUtils::Thread::SafeShared<std::string>{"Foo"};
			auto safeSharedString1 = safeSharedString0;
			{
				auto accessor0 = safeSharedString0.sharedAccess();
				auto accessor1 = safeSharedString0.sharedAccess();
				auto accessor2 = safeSharedString1.sharedAccess();
				auto accessor3 = safeSharedString1.sharedAccess();
				suite.expect(accessor0.value() == "Foo");
				suite.expect(accessor1.value() == "Foo");
				suite.expect(accessor2.value() == "Foo");
				suite.expect(accessor3.value() == "Foo");
			}
		});
	}};
}
