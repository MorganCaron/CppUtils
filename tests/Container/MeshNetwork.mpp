export module CppUtils.UnitTests.Container.MeshNetwork;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Container::MeshNetwork
{
	inline auto _ = TestSuite{"Container/MeshNetwork", {"Container/NetworkPtr"}, [](auto& suite) {
		using Logger = CppUtils::Logger<"CppUtils">;
		using StringMeshNode = CppUtils::Container::MeshNodePtr<std::string, std::string>;

		suite.addTest("Initialization", [&] {
			auto _ = StringMeshNode::make("banana");
		});

		suite.addTest("Access value", [&] {
			auto apple = StringMeshNode::make("apple");
			auto accessor = apple->sharedAccess();
			const auto& value = accessor->value.value;
			Logger::print("{}\n", value);
			suite.expect(value == "apple");
		});

		suite.addTest("Copy reference", [&] {
			auto appleRef = CppUtils::Container::SafeShared<StringMeshNode>{};
			{
				auto apple = StringMeshNode::make("apple");
				appleRef = apple;
			}
			auto accessor = appleRef->sharedAccess();
			const auto& value = accessor->value.value;
			Logger::print("{}\n", value);
			suite.expect(value == "apple");
		});

		suite.addTest("Attach child", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			{
				auto apple = StringMeshNode::make("apple");
				StringMeshNode::Value::attach(fruit, "Elements", apple);
			}

			auto fruitAccessor = fruit->sharedAccess();
			const auto& fruitBranches = fruitAccessor->value.branches;
			suite.expect(std::size(fruitBranches) == 1);
			const auto& fruits = fruitBranches.at("Elements");
			suite.expect(std::size(fruits) == 1);
			{
				auto apple = StringMeshNode::SharedPtr{fruits[0]};
				auto appleAccessor = apple->sharedAccess();
				const auto& value = appleAccessor->value.value;
				Logger::print("{}\n", value);
				suite.expect(value == "apple");
			}
		});

		suite.addTest("Detach child", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			auto apple = StringMeshNode::make("apple");
			auto banana = StringMeshNode::make("banana");
			{
				auto fruitAccessor = fruit->uniqueAccess();
				StringMeshNode::Value::attach(fruitAccessor, "Elements", apple);
				StringMeshNode::Value::attach(fruitAccessor, "Elements", banana);
			}

			{
				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				suite.expect(std::size(fruitBranches) == 1);
				const auto& fruits = fruitBranches.at("Elements");
				suite.expect(std::size(fruits) == 2);
				{
					auto apple = StringMeshNode::SharedPtr{fruits[0]};
					auto appleAccessor = apple->sharedAccess();
					const auto& value = appleAccessor->value.value;
					Logger::print("{}\n", value);
					suite.expect(value == "apple");
				}
				{
					auto banana = StringMeshNode::SharedPtr{fruits[1]};
					auto bananaAccessor = banana->sharedAccess();
					const auto& value = bananaAccessor->value.value;
					Logger::print("{}\n", value);
					suite.expect(value == "banana");
				}
			}

			{
				StringMeshNode::Value::detach(fruit, "Elements", apple);

				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				suite.expect(std::size(fruitBranches) == 1);
				const auto& fruits = fruitBranches.at("Elements");
				suite.expect(std::size(fruits) == 1);
				{
					auto banana = StringMeshNode::SharedPtr{fruits[0]};
					auto bananaAccessor = banana->sharedAccess();
					const auto& value = bananaAccessor->value.value;
					Logger::print("{}\n", value);
					suite.expect(value == "banana");
				}
			}

			{
				StringMeshNode::Value::detach(fruit, "Elements", banana);

				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				suite.expect(std::size(fruitBranches) == 0);
			}
		});

		suite.addTest("Detach children", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			auto apple = StringMeshNode::make("apple");
			auto banana = StringMeshNode::make("banana");
			{
				auto fruitAccessor = fruit->uniqueAccess();
				StringMeshNode::Value::attach(fruitAccessor, "Elements", apple);
				StringMeshNode::Value::attach(fruitAccessor, "Elements", banana);
			}

			{
				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				suite.expect(std::size(fruitBranches) == 1);
				const auto& fruits = fruitBranches.at("Elements");
				suite.expect(std::size(fruits) == 2);
				{
					auto apple = StringMeshNode::SharedPtr{fruits[0]};
					auto appleAccessor = apple->sharedAccess();
					const auto& value = appleAccessor->value.value;
					Logger::print("{}\n", value);
					suite.expect(value == "apple");
				}
				{
					auto banana = StringMeshNode::SharedPtr{fruits[1]};
					auto bananaAccessor = banana->sharedAccess();
					const auto& value = bananaAccessor->value.value;
					Logger::print("{}\n", value);
					suite.expect(value == "banana");
				}
			}

			{
				StringMeshNode::Value::detach(fruit, "Elements");

				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				suite.expect(std::size(fruitBranches) == 0);
			}
		});

		suite.addTest("Bilateral attachment", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			auto apple = StringMeshNode::make("apple");
			StringMeshNode::Value::attach("Categories", fruit, "Elements", apple);
			{
				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				const auto& fruits = fruitBranches.at("Elements");
				suite.expect(std::size(fruits) == 1);
				auto firstFruit = StringMeshNode::SharedPtr{fruits[0]};
				auto appleAccessor = firstFruit->sharedAccess();
				const auto& appleName = appleAccessor->value.value;
				const auto& fruitName = fruitAccessor->value.value;
				Logger::print("{} is a {}\n", appleName, fruitName);
				suite.expect(appleName == "apple");
				suite.expect(fruitName == "fruit");
			}
			{
				auto appleAccessor = apple->sharedAccess();
				const auto& appleBranches = appleAccessor->value.branches;
				const auto& appleCategories = appleBranches.at("Categories");
				suite.expect(std::size(appleCategories) == 1);
				auto firstCategory = StringMeshNode::SharedPtr{appleCategories[0]};
				auto fruitAccessor = firstCategory->sharedAccess();
				const auto& appleName = appleAccessor->value.value;
				const auto& fruitName = fruitAccessor->value.value;
				Logger::print("{} is a {}\n", appleName, fruitName);
				suite.expect(appleName == "apple");
				suite.expect(fruitName == "fruit");
			}
		});

		suite.addTest("Many", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			auto banana = StringMeshNode::make("banana");
			auto orangeFruit = StringMeshNode::make("orange");
			auto lemon = StringMeshNode::make("lemon");

			StringMeshNode::Value::attach("Categories", fruit, "Elements", banana);
			StringMeshNode::Value::attach("Categories", fruit, "Elements", orangeFruit);
			StringMeshNode::Value::attach("Categories", fruit, "Elements", lemon);

			auto color = StringMeshNode::makeRoot("color");
			auto orangeColor = StringMeshNode::make("orange");
			auto yellow = StringMeshNode::make("yellow");

			StringMeshNode::Value::attach("Categories", color, "Elements", orangeColor);
			StringMeshNode::Value::attach("Categories", color, "Elements", yellow);

			StringMeshNode::Value::attach("Elements", banana, "Colors", yellow);
			StringMeshNode::Value::attach("Elements", orangeFruit, "Colors", orangeColor);
			StringMeshNode::Value::attach("Elements", lemon, "Colors", yellow);

			{
				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				for (const auto& weakFruit : fruitBranches.at("Elements"))
				{
					auto fruit = StringMeshNode::SharedPtr{weakFruit};
					auto fruitAccessor = fruit->sharedAccess();
					const auto& fruitBranches = fruitAccessor->value.branches;

					const auto& fruitCategories = fruitBranches.at("Categories");
					suite.expect(std::size(fruitCategories) == 1);
					auto fruitCategory = StringMeshNode::SharedPtr{fruitCategories[0]};
					auto fruitCategoryAccessor = fruitCategory->sharedAccess();
					suite.expect(fruitCategoryAccessor->value.value == "fruit");

					const auto& colors = fruitBranches.at("Colors");
					suite.expect(std::size(colors) == 1);
					auto color = StringMeshNode::SharedPtr{colors[0]};
					auto colorAccessor = color->sharedAccess();

					Logger::print("{} is a {} {}\n", fruitAccessor->value.value, colorAccessor->value.value, fruitCategoryAccessor->value.value);
				}
			}
		});
	}};
}
