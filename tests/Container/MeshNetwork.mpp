export module CppUtils.UnitTests.Container.MeshNetwork;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Container::MeshNetwork
{
	inline auto _ = TestSuite{"Container/MeshNetwork", {"Container/NetworkPtr"}, [](auto& suite) {
		using Logger = CppUtils::Logger<"CppUtils">;
		using StringMeshNode = CppUtils::Container::MeshNodePtr<std::string, std::string>;

		suite.addTest("Initialization", [&] {
			[[maybe_unused]] auto bananaNode = StringMeshNode::make("banana");
		});

		suite.addTest("Access value", [&] {
			auto banana = StringMeshNode::make("banana");
			auto accessor = banana->sharedAccess();
			const auto& value = accessor->value.value;
			Logger::print("{}\n", value);
			suite.expect(value == "banana");
		});

		suite.addTest("Copy reference", [&] {
			auto bananaRef = StringMeshNode::SharedPtr{};
			{
				auto banana = StringMeshNode::make("banana");
				bananaRef = banana;
			}
			auto accessor = bananaRef->sharedAccess();
			const auto& value = accessor->value.value;
			Logger::print("{}\n", value);
			suite.expect(value == "banana");
		});

		suite.addTest("Attach child", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			{
				auto banana = StringMeshNode::make("banana");
				StringMeshNode::Value::attach(fruit, "Elements", banana);
			}

			auto fruitAccessor = fruit->sharedAccess();
			const auto& fruitBranches = fruitAccessor->value.branches;
			suite.expect(std::size(fruitBranches) == 1);
			const auto& fruits = fruitBranches.at("Elements");
			suite.expect(std::size(fruits) == 1);
			auto firstFruit = std::shared_ptr{fruits[0]};
			auto bananaAccessor = firstFruit->sharedAccess();
			const auto& value = bananaAccessor->value.value;
			Logger::print("{}\n", value);
			suite.expect(value == "banana");
		});

		suite.addTest("Bilateral attachment", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			auto banana = StringMeshNode::make("banana");
			StringMeshNode::Value::attach("Categories", fruit, "Elements", banana);
			{
				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				const auto& fruits = fruitBranches.at("Elements");
				suite.expect(std::size(fruits) == 1);
				auto firstFruit = std::shared_ptr{fruits[0]};
				auto bananaAccessor = firstFruit->sharedAccess();
				const auto& bananaName = bananaAccessor->value.value;
				const auto& fruitName = fruitAccessor->value.value;
				Logger::print("{} is a {}\n", bananaName, fruitName);
				suite.expect(bananaName == "banana");
				suite.expect(fruitName == "fruit");
			}
			{
				auto bananaAccessor = banana->sharedAccess();
				const auto& bananaBranches = bananaAccessor->value.branches;
				const auto& bananaCategories = bananaBranches.at("Categories");
				suite.expect(std::size(bananaCategories) == 1);
				auto firstCategory = std::shared_ptr{bananaCategories[0]};
				auto fruitAccessor = firstCategory->sharedAccess();
				const auto& bananaName = bananaAccessor->value.value;
				const auto& fruitName = fruitAccessor->value.value;
				Logger::print("{} is a {}\n", bananaName, fruitName);
				suite.expect(bananaName == "banana");
				suite.expect(fruitName == "fruit");
			}
		});

		suite.addTest("Many", [&] {
			auto fruit = StringMeshNode::makeRoot("fruit");
			auto banana = StringMeshNode::make("banana");
			auto orangeFruit = StringMeshNode::make("orange");
			auto lemon = StringMeshNode::make("lemon");

			StringMeshNode::Value::attach("Categories", fruit, "Elements", banana);
			StringMeshNode::Value::attach("Categories", fruit, "Elements", orangeFruit);
			StringMeshNode::Value::attach("Categories", fruit, "Elements", lemon);

			auto color = StringMeshNode::makeRoot("color");
			auto orangeColor = StringMeshNode::make("orange");
			auto yellow = StringMeshNode::make("yellow");

			StringMeshNode::Value::attach("Categories", color, "Elements", orangeColor);
			StringMeshNode::Value::attach("Categories", color, "Elements", yellow);

			StringMeshNode::Value::attach("Elements", banana, "Colors", yellow);
			StringMeshNode::Value::attach("Elements", orangeFruit, "Colors", orangeColor);
			StringMeshNode::Value::attach("Elements", lemon, "Colors", yellow);

			{
				auto fruitAccessor = fruit->sharedAccess();
				const auto& fruitBranches = fruitAccessor->value.branches;
				for (const auto& weakFruit : fruitBranches.at("Elements"))
				{
					auto fruit = std::shared_ptr{weakFruit};
					auto fruitAccessor = fruit->sharedAccess();
					const auto& fruitBranches = fruitAccessor->value.branches;
					const auto& colors = fruitBranches.at("Colors");
					suite.expect(std::size(colors) == 1);
					auto color = std::shared_ptr{colors[0]};
					auto colorAccessor = color->sharedAccess();
					const auto& colorBranches = colorAccessor->value.branches;
					const auto& categories = colorBranches.at("Categories");
					suite.expect(std::size(categories) == 1);
					auto category = std::shared_ptr{categories[0]};
					auto categoryAccessor = category->sharedAccess();
					Logger::print("{} is a {} {}\n", fruitAccessor->value.value, colorAccessor->value.value, categoryAccessor->value.value);
				}
			}
		});
	}};
}
