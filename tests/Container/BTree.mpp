export module CppUtils.UnitTests.Container.BTree;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Container::BTree
{
	inline auto _ = TestSuite{"Container/BTree", {"Logger"}, [](auto& suite) {
		using namespace std::literals;
		using Logger = CppUtils::Logger<"CppUtils">;

		suite.addTest("Empty", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			Logger::print("{}", bTree);
			suite.expect(std::empty(bTree));
		});

		suite.addTest("1 element", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			Logger::print("{}", bTree);
			suite.expect(not std::empty(bTree));
			suite.expectEqual(std::size(bTree), 1uz);
		});

		suite.addTest("2 elements", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			bTree.add(1, 'B');
			Logger::print("{}", bTree);
			suite.expectEqual(std::size(bTree), 2uz);
		});

		suite.addTest("5 elements (split self)", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			for (auto i = 0; i < 5; ++i)
				bTree.add(i, 'A' + static_cast<char>(i));
			Logger::print("{}", bTree);
			suite.expectEqual(std::size(bTree), 5uz);
		});

		suite.addTest("8 elements (split self & split child)", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			for (auto i = 0; i < 8; ++i)
				bTree.add(i, 'A' + static_cast<char>(i));
			Logger::print("{}", bTree);
			suite.expectEqual(std::size(bTree), 8uz);
		});

		suite.addTest("10 elements", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			for (auto i = 0; i < 10; ++i)
				bTree.add(i, 'A' + static_cast<char>(i));
			Logger::print("{}", bTree);
			suite.expectEqual(std::size(bTree), 10uz);
		});

		suite.addTest("Exists", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			Logger::print("{}", bTree);
			suite.expect(bTree.exists(0));
			suite.expect(not bTree.exists(1));
		});

		suite.addTest("Key hasher", [&] {
			auto bTree = CppUtils::Container::BTree::Node<std::string, int>{};
			bTree.add("test", 0);
			Logger::print("{}", bTree);
			suite.expectEqual(std::size(bTree), 1uz);
		});

		suite.addTest("Removing element", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			bTree.remove(0);
			Logger::print("{}", bTree);
			suite.expect(std::empty(bTree));
		});

		suite.addTest("Removing nested element", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			Logger::print("{}", bTree);
			suite.expect(std::empty(bTree));
		});

		suite.addTest("Clear", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			bTree.clear();
			Logger::print("{}", bTree);
			suite.expect(std::empty(bTree));
		});

		suite.addTest("Search key", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			Logger::print("{}", bTree);
			suite.expect(bTree.exists(0));
			suite.expectEqual(bTree.get(0), 'A');
		});

		suite.addTest("Set value", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree[0] = 'A';
			Logger::print("{}", bTree);
			suite.expect(not std::empty(bTree));
			suite.expect(bTree.exists(0));
			suite.expectEqual(bTree.get(0), 'A');
		});

		suite.addTest("Edit value", [&] {
			auto bTree = CppUtils::Container::BTree::Node<int, char>{};
			bTree.add(0, 'A');
			bTree[0] = 'B';
			Logger::print("{}", bTree);
			suite.expectEqual(bTree.size(), 1uz);
			suite.expect(bTree.exists(0));
			suite.expectEqual(bTree.get(0), 'B');
		});
	}};
}
