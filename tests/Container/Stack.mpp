export module CppUtils.UnitTests.Container.Stack;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::Container::Stack
{
	inline auto _ = TestSuite{"Container/Stack", {"Logger"}, [](auto& suite) {
		using namespace std::literals;
		using Logger = CppUtils::Logger<"CppUtils">;

		suite.addTest("Empty Stack", [&] {
			auto stack = CppUtils::Container::Stack{};
			suite.expect(std::empty(stack));
		});

		suite.addTest("Push one value", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(42);
			suite.expect(not std::empty(stack));
			suite.expectEqual(std::size(stack), sizeof(int));
		});

		suite.addTest("Pop", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(42);
			{
				auto result = stack.pop<int>();
				suite.expect(result.has_value());
				suite.expectEqual(result.value(), 42);
			}
			suite.expect(std::empty(stack));
			{
				auto result = stack.pop<int>();
				suite.expect(not result.has_value());
			}
		});

		suite.addTest("One type, multiple values", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(1);
			stack.push(2);
			stack.push(3);
			suite.expectEqual(std::size(stack), sizeof(int) * 3);
		});

		suite.addTest("Multiple types", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(true);
			stack.push(42);
			stack.push(3.14f);
			stack.push("Hello World!"sv);
			suite.expectEqual(std::size(stack), sizeof(bool) + sizeof(int) + sizeof(float) + sizeof(std::string_view));

			stack.dump();

			{
				auto result = stack.get<bool>(sizeof(int) + sizeof(float) + sizeof(std::string_view));
				suite.expect(result.has_value());
				Logger::print("{}\n", result.value());
			}
			{
				auto result = stack.get<int>(sizeof(float) + sizeof(std::string_view));
				suite.expect(result.has_value());
				Logger::print("{}\n", result.value());
			}
			{
				auto result = stack.get<float>(sizeof(std::string_view));
				suite.expect(result.has_value());
				Logger::print("{}\n", result.value());
			}
			{
				auto result = stack.get<std::string_view>();
				suite.expect(result.has_value());
				Logger::print("{}\n", result.value());
			}
		});

		suite.addTest("Call function: () -> std::size_t", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(0uz);
			auto getNumber = []() -> std::size_t {
				return 42uz;
			};
			auto _ = stack.call(+getNumber);
			{
				auto result = stack.pop<std::size_t>();
				suite.expect(result.has_value());
				suite.expectEqual(result.value(), 42uz);
			}
			suite.expect(std::empty(stack));
		});

		suite.addTest("Call function: (std::size_t) -> void", [&] {
			auto stack = CppUtils::Container::Stack{};
			auto print = [](std::size_t nb) -> void {
				std::println("{}", nb);
			};
			stack.push(42uz);
			auto _ = stack.call(print);
		});

		suite.addTest("Call function: (std::size_t, std::size_t) -> std::size_t", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(0uz);
			stack.push(30uz);
			stack.push(12uz);
			auto add = [](std::size_t lhs, std::size_t rhs) -> std::size_t {
				return lhs + rhs;
			};
			auto _ = stack.call(add);
			auto _ = stack.drop(sizeof(std::size_t) * 2);
			{
				auto result = stack.pop<std::size_t>();
				suite.expect(result.has_value());
				suite.expectEqual(result.value(), 42uz);
			}
			suite.expect(std::empty(stack));
		});

		suite.addTest("Call functions", [&] {
			auto stack = CppUtils::Container::Stack{};
			stack.push(0uz);
			stack.push(30uz);
			stack.push(12uz);
			auto add = [](std::size_t lhs, std::size_t rhs) -> std::size_t {
				return lhs + rhs;
			};
			auto print = [](std::size_t nb) -> void {
				std::println("{}", nb);
			};
			auto _ = stack.call(add);
			auto _ = stack.drop(sizeof(std::size_t) * 2);
			{
				auto result = stack.get<std::size_t>();
				suite.expect(result.has_value());
				suite.expectEqual(result.value(), 42uz);
			}
			auto _ = stack.call(print);
			auto _ = stack.drop(sizeof(std::size_t));
			suite.expect(std::empty(stack));
		});
	}};
}
