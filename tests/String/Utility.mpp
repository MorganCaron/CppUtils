export module CppUtils.UnitTests.String.Utility;

import std;
import CppUtils;

export namespace CppUtils::UnitTest::String::Utility
{
	inline auto _ = TestSuite{"String/Utility", [](auto& suite) {
		using namespace std::literals;
		using Logger = CppUtils::Logger<"CppUtils">;

		suite.addTest("concatenateStringsWithDelimiter", [&] {
			auto strings = std::vector{"A"sv, "B"sv, "C"sv};
			auto string = CppUtils::String::concatenateStringsWithDelimiter(strings, ", ");

			Logger::print("{}\n", string);
			suite.expectEqual(string, "A, B, C");
		});

		suite.addTest("trimString", [&] {
			auto string = "\n \t Hello World!\n \t ";
			auto leftTrimString = CppUtils::String::leftTrimString(string);
			auto rightTrimString = CppUtils::String::rightTrimString(string);
			auto trimString = CppUtils::String::trimString(string);

			Logger::print("\"{}\"\n", leftTrimString);
			suite.expectEqual(leftTrimString, "Hello World!\n \t ");

			Logger::print("\"{}\"\n", rightTrimString);
			suite.expectEqual(rightTrimString, "\n \t Hello World!");

			Logger::print("\"{}\"\n", trimString);
			suite.expectEqual(trimString, "Hello World!");
		});

		suite.addTest("getPrintableChar", [&] {
			auto output = ""s;
			for (char c = 0; c >= 0; ++c)
				output += CppUtils::String::getPrintableChar(c) + ' ';
			Logger::print("{}\n", output);
		});

		suite.addTest("getNumberLength", [&] {
			suite.expectEqual(CppUtils::String::getNumberLength(0), 1uz);
			suite.expectEqual(CppUtils::String::getNumberLength(1), 1uz);
			suite.expectEqual(CppUtils::String::getNumberLength(2), 1uz);
			suite.expectEqual(CppUtils::String::getNumberLength(10), 2uz);

			suite.expectEqual(CppUtils::String::getNumberLength(-1), 2uz);
			suite.expectEqual(CppUtils::String::getNumberLength(-2), 2uz);
			suite.expectEqual(CppUtils::String::getNumberLength(-10), 3uz);

			suite.expectEqual(CppUtils::String::getNumberLength(0, 2), 1uz);
			suite.expectEqual(CppUtils::String::getNumberLength(1, 2), 1uz);
			suite.expectEqual(CppUtils::String::getNumberLength(2, 2), 2uz);
			suite.expectEqual(CppUtils::String::getNumberLength(10, 2), 4uz);
		});

		suite.addTest("toString", [&] {
			suite.expectEqual(CppUtils::String::toString<2>(0), "0"sv);
			suite.expectEqual(CppUtils::String::toString<2>(1), "1"sv);
			suite.expectEqual(CppUtils::String::toString<2>(2), "10"sv);
			suite.expectEqual(CppUtils::String::toString<2>(10), "1010"sv);

			suite.expectEqual(CppUtils::String::toString(0), "0"sv);
			suite.expectEqual(CppUtils::String::toString(1), "1"sv);
			suite.expectEqual(CppUtils::String::toString(-1), "-1"sv);

			suite.expectEqual(CppUtils::String::toString(42), "42"sv);
			suite.expectEqual(CppUtils::String::toString(42u), "42"sv);
			suite.expectEqual(CppUtils::String::toString(42uz), "42"sv);
			suite.expectEqual(CppUtils::String::toString(42ll), "42"sv);

			suite.expectEqual(CppUtils::String::toString(-42), "-42"sv);
			suite.expectEqual(CppUtils::String::toString(-42ll), "-42"sv);

			suite.expectEqual(CppUtils::String::toString(123456), "123456"sv);
			suite.expectEqual(CppUtils::String::toString(-123456), "-123456"sv);
		});

		suite.addTest("split", [&] {
			auto splitString = CppUtils::String::split("Hello World!", " ");
			suite.expectEqual(std::size(splitString), 2uz);
			suite.expectEqual(splitString[0], "Hello"sv);
			suite.expectEqual(splitString[1], "World!"sv);
		});
	}};
}
