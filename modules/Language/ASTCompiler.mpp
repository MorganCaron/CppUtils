export module CppUtils.Language.ASTCompiler;

import std;
import CppUtils.Type;
import CppUtils.String;
import CppUtils.Language.AST;
import CppUtils.Language.VirtualMachine;
import CppUtils.Language.HighLevelLabelsCompiler;

export namespace CppUtils::Language::ASTCompiler
{
	template<class CharT>
	inline constexpr auto compile(const std::basic_string_view<CharT> source) -> std::size_t
	{
		using namespace std::literals;
		constexpr auto astCompiler = uR"(
				main {
					(: (1@ # call foobar
					X
				}

				foobar {
					0
				}
				)"sv;
		auto compiler = HighLevelLabelsCompiler::compile(astCompiler);
		return VirtualMachine::execute<
			std::size_t>(
			compiler,
			&source);
	}
}
