export module CppUtils.Language.TreeCompiler;

import std;
import CppUtils.Memory;
import CppUtils.Container.Tree;
import CppUtils.Language.VirtualMachine;
import CppUtils.Language.CallStackCompiler;

export namespace CppUtils::Language::TreeCompiler
{
	template<class CharT>
	inline auto compile(const std::basic_string_view<CharT> source) -> Container::TokenTree
	{
		using namespace std::literals;
		constexpr auto treeCompiler = uR"(
				main(): Container::TokenTree* 10§{
					(0, 0, 0, 5C # register0 = 0; (source position)
					(:N # arg0 = new TokenTree();
						(20@ # buildNode(arg0);
					X # return arg0;
				}

				getSourceSize(): size 11§{
					(1; (2;) # return source.size();
				}

				getSourcePosition(): size 12§{
					(0, 5, 0, 0C # return position;
				}

				incrementSourcePosition(): void 13§{
					(0, 5, 1, 0+ (0, 0, 5C # position += 1;
				}

				isEndOfFile(): bool 14§{
					(1:(12@, (1:(11@, <! # return getSourcePosition() >= getSourceSize();
				}

				getChar(): char 15§{
					(1; (1:(12@ (3;)) # return source.at(getSourcePosition());
				}

				isSpace(): bool 16§{
					(3:(15@ # char = getChar();
						(0, 6, \ , 0=! # if (char == ' ')
							(0, 8, 0? )1} # return true;
						(0, 6, 9, 0=! # if (char == '\t')
							(0, 8, 0? )1} # return true;
						(0, 6, 10, 0=! # if (char == '\n')
							(0, 8, 0? )1} # return true;
					)0 # return false;
				}

				skipSpaces(): void 17§{
					§ (2:(14@ (0, 19, 5? (2:(16@! (0, 19, 5? # while (not isEndOfFile() and isSpace()) {
						(13@ # incrementSourcePosition();
					(18¤§ # }
				}

				buildNode(TokenTree* node): void 20§{
					(17@ # skipSpaces();
					# while (not isEndOfFile()) {
						# parse
						(17@ # skipSpaces();
					# }
				}
				)"sv;
		auto compiler = CallStackCompiler::compile(treeCompiler);
		return Memory::moveRawPointer(VirtualMachine::execute<
			Container::TokenTree*,
			std::size_t,
			bool,
			CharT,
			const decltype(source)*,
			std::basic_string<CharT>*>(
			compiler,
			&source,
			&decltype(source)::size,
			&decltype(source)::at,
			&std::basic_string<CharT>::push_back));
	}
}
