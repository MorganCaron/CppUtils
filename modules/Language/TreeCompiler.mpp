export module CppUtils.Language.TreeCompiler;

import std;
import CppUtils.Memory;
import CppUtils.Container.Tree;
import CppUtils.Language.VirtualMachine;
import CppUtils.Language.HighLevelLabelsCompiler;

export namespace CppUtils::Language::TreeCompiler
{
	template<class CharT>
	inline auto compile(const std::basic_string_view<CharT> source) -> Container::TokenTree
	{
		using namespace std::literals;
		constexpr auto treeCompiler = uR"(
				main {
					(1@ # call buildTree
					X
				}

				buildTree {
					N
				}
				)"sv;
		auto compiler = HighLevelLabelsCompiler::compile(treeCompiler);
		return Memory::moveRawPointer(VirtualMachine::execute<
			Container::TokenTree*,
			std::size_t>(
			compiler,
			&source));
	}
}
