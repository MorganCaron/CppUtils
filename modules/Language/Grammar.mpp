export module CppUtils.Language.Grammar;

import std;
import CppUtils.Type;
import CppUtils.Language.VirtualMachine;

export namespace CppUtils::Language
{
	namespace LowLevelLabels
	{
		template<class CharT>
		inline constexpr auto compile(const std::basic_string_view<CharT> source) -> std::basic_string<CharT>
		{
			using namespace std::literals;
			constexpr auto lowLevelLabelsCompiler = uR"(
				(:N output
					(3:\(, 4;) push back
					(7; max length
						P (2: (2, 6, 0, 0=!, 0, 181, 0? while max length not equal zero
							(: (0, 0, 0, 2C output
								(3:\ , 4;) push back
							)
							(1, 6, 1, 0-, 0, 2, 1, 0C) decrement max length
							, 0, 7J goto while
						)
					)
					(3: push back
						\,, 4;
						_\1, 4;
						_\J, 4;
					)
					(1: (1;, 2;) source length
						(0 source position
							P (2: (2, 4, 1, 4=!, 0, 449, 0? while source position not equal source length
								(: (0, 0, 0, 2C output
									(3: (1; (1: (2, 0, 0, 2C, 3;)) get char at source position
										(2: (1, 6, 3:\¤, 0=, 0, 123, 0? if char is ¤
											_\,, 4; push back
											_\5, 4; push back
											_\J, 4; push back
										(36, 0J else
											, 4; push back char
									)
								)
								(2, 4, 1, 0+ (0, 2, 2, 0C) increment source position
								(0, 7J goto while
							)
						)
					)
					(3:\X, 4;) push back
					(1: (: (0, 0, 0, 2C, 5;) (0, 1, 0- output length
						(7; position
							P (2: (1, 4, 0, 0=!, 0, 451, 0? while output length not equal zero
									(1, 4, 10, 0% get digit
										(1, 4, 0, 6- (0, 10, 0/ (0, 2, 1, 0C) remove digit from output length
										(0, \0, 0+ add zero
										(: (0, 0, 0, 2C output
											(1: (2, 0, 0, 2C position
												(3: (3, 2, 0, 2C cast digit to char
													, 8; replace
												)
												(0, 1, 0- decrement position
											(0, 2, 2, 0C)
										)
									)
								(0, 7J goto while
							)
						)
					)
					(1: (: (0, 0, 0, 2C, 5;) output length
						(0 output position
							P (2: (2, 4, 1, 4=!, 0, 984, 0? while output position not equal output length
								(: (0, 0, 0, 2C output
									(3: (:, 0, 0, 0, 2C (1: (2, 0, 0, 2C, 6;)) get char at output position
										(2: (1, 6, 3:\§, 0=, 0, 677, 0? if char is §
										_\(, 4; push back
										(1: (2, 0, 0, 2C output position
											P (2: (6, 4, 0, 0=!, 0, 242, 0? while value not equal zero
												(6, 4, 10, 0% get digit
													(6, 4, 0, 6- (0, 10, 0/ (0, 2, 6, 0C) remove digit from value
													(0, \0, 0+ add zero
													S switch position and digit
												(0, 7J goto while
											)
											P (2: (2, 6, 0, 0=!, 0, 220, 0? while char is not zero
												(: (0, 0, 0, 2C output
													(3: (3, 2, 0, 2C cast digit to char
														(4; push back
													)
												)
												S) drop digit
												(0, 7J goto while
											)
										) end if
									)
								)
								(2, 4, 1, 0+ (0, 2, 2, 0C) increment output position
								(0, 7J goto while
							)
						)
					)
					(3:\(, 4;) push back
					(7; (0, 3, 0+ header length
						P (2: (1, 4, 0, 0=!, 0, 236, 0? while header length not equal zero
								(1, 4, 10, 0% get digit
									(1, 4, 0, 6- (0, 10, 0/ (0, 2, 1, 0C) remove digit from header length
									(0, \0, 0+ add zero
								S switch position and digit
							(0, 7J goto while
						)
						P (2: (2, 6, 0, 0=! (0, 185, 0? while char is not zero
							(: (0, 0, 0, 2C output
								(3: (3, 2, 0, 2C cast digit to char
									(4; push back
								)
							)
							S) drop digit
							(0, 7J goto while
						)
					)
					(3: push back
						\,, 4;
						_\1, 4;
						_\J, 4;
					)
				)"sv;
			auto maxSizeLength = std::size(std::to_string(std::numeric_limits<std::size_t>::max()));
			auto output = std::unique_ptr<std::basic_string<CharT>>(VirtualMachine::execute<
				std::basic_string<CharT>*,
				std::size_t,
				bool,
				CharT,
				const decltype(source)*>(
				lowLevelLabelsCompiler,
				&source,
				&decltype(source)::size,
				&decltype(source)::at,
				&std::basic_string<CharT>::push_back,
				&std::basic_string<CharT>::size,
				Type::getConstMemberFunction(&std::basic_string<CharT>::at),
				maxSizeLength,
				+[](std::basic_string<CharT>* s, std::size_t pos, CharT c) -> void { s->replace(pos, 1, 1, c); }));
			return std::basic_string<CharT>{std::move(*output)};
		}
	}

	namespace HighLevelLabels
	{
		template<class CharT>
		inline constexpr auto compile(const std::basic_string_view<CharT> source) -> std::basic_string<CharT>
		{
			using namespace std::literals;
			constexpr auto highLevelLabelsCompiler = uR"(
				(0¤ main

				0§ main
					(:N output
						(1: (1;, 2;) input length
							(0 input position
								§ (2: (1, 6, 2, 6=! (0, 3, 5? while position not equal to length
									(3: (1; (1: (3, 2, 0, 2C (3;)) get char at position
										(2: (1, 6, 3:\#, 0=! (0, 7, 5? if char is # then call parse comment
										(: (4, 2, 0, 2C output
											S, 4; push back
										)
										§ continue
									)
									(0, 1, 0+ increment position
								(1¤3§ end while
							)
						)
						(1: (: (2, 2, 0, 2C (5;) output length
							(0 output position
								§ (2: (1, 6, 2, 6=! (0, 6, 5? while position not equal to length
									(3: (: (4, 2, 0, 2C (1: (3, 2, 0, 2C (6;)) get char at position
										(2: (1, 6, 3:\λ, 0=! (0, 10, 5? if char is λ then call parse function
										§ continue
									)
									(0, 1, 0+ increment position
								(4¤6§ end while
							)
						)
					X
				
				7§ parse comment
					(2: (2, 6, 3, 6=! (0, 9, 5? while position not equal to length
						(3: (1; (1: (4, 2, 0, 2C (3;)) get char at position
							(2: (1, 6, 3:10, 0=! (0, 8, 5? if char not equal new line
								(2, 6, 1, 0+ (0, 2, 3, 2C) increment position
						)
					(7¤8§)§ end while
					(2¤

				10§ parse function
					I
					(5¤
				
				)"sv;
			auto compiler = LowLevelLabels::compile(highLevelLabelsCompiler);
			auto output = std::unique_ptr<std::basic_string<CharT>>(VirtualMachine::execute<
				std::basic_string<CharT>*,
				std::size_t,
				bool,
				CharT,
				const decltype(source)*>(
				compiler,
				&source,
				&decltype(source)::size,
				&decltype(source)::at,
				&std::basic_string<CharT>::push_back,
				&std::basic_string<CharT>::size,
				Type::getConstMemberFunction(&std::basic_string<CharT>::at)));
			return std::basic_string<CharT>{std::move(*output)};
		}
	}

	/*inline constexpr auto lowLevelLabelsCompiler = u8R"(
		_3<_L <_D <_3SP <_4!	_<E
		_3<_R <_167D <_21!	_4<_L <_1SDA _<87J
		_3<_R <_42D <_51!	_4<_60A_95A_49A_83A_66A_95A_82A_60A_95A_83A_66A
		_3<_R <_4SA
		_3<_1J _<1B
	)"sv;

	inline constexpr auto highLevelLabelsCompiler = u8R"(
		main
			goto _1* define labels §
			end _<E

		§ define labels
			if _3<_L <_D <_3SP <_25! then goto _5*
			if _3<_R <_167DN <_25! then goto _2*
				_4<_L <_1SDA _<87J
				_4*
			§ endif
			if _3<_R <_42DN <_25! then goto _3*
				_4<_60A_95A_49A_83A_66A_95A_82A_60A_95A_83A_66A
				_4*
			§ endif
			_3<_R <_4SA
			§ next char
			_3<_1J _1* define labels
			§ end
			_*
	)"sv;

	inline constexpr auto CLanguage = std::array{

	};*/
}
