export module CppUtils.Language.GenericVirtualMachine;

import std;
import CppUtils.Container.Tree;
import CppUtils.Type;
import CppUtils.String;

export namespace CppUtils::Language
{
	using Symbol = std::uint64_t;
	using ASTNode = Container::Tree::Node<Symbol>;

	template<String::StringView Source>
	struct Cursor final
	{
		Source source;
		std::size_t position = 0;

		[[nodiscard]] inline auto getCurrent() -> const auto&
		{
			return source[position];
		}
	};

	template<class Context, auto&& interpreter, auto inspector = nullptr>
	struct GenericVirtualMachine final
	{
		using context_type = Context;
		Context context = {};

		template<auto&&... functions>
		inline constexpr auto execute(Type::Specializes<Cursor> auto&& cursor, const ASTNode& instruction = ASTNode{String::hash("main")}) -> std::expected<GenericVirtualMachine<Context, interpreter, inspector>, std::string>
		{
			if constexpr (not std::same_as<decltype(inspector), std::nullptr_t>)
				if (auto result = inspector(cursor, instruction, context); not result)
					return std::unexpected{std::move(result.error())};
			if (auto result = interpreter.template operator()<functions...>(cursor, instruction, *this); not result)
				return std::unexpected{std::move(result.error())};
			return *this;
		}
	};
}
