export module CppUtils.Language.CallStackCompiler;

import std;
import CppUtils.Type;
import CppUtils.String;
import CppUtils.Language.VirtualMachine;
import CppUtils.Language.LabelsCompiler;

export namespace CppUtils::Language::CallStackCompiler
{
	template<class CharT>
	inline constexpr auto compile(const std::basic_string_view<CharT> source) -> std::basic_string<CharT>
	{
		using namespace std::literals;
		constexpr auto callStackCompiler = uR"(
				(0¤ main

				0§ main
					(:N output
						(5¤1§ add empty prefix
						(8¤2§ add code
						(19¤3§ fill prefix
						(22¤4§ add suffix
					X

				5§ add empty prefix
					(3:\(, 4;) push back
					(7; max length
						§ (2: (1, 6, 0, 0= (0, 7, 5? while max length not equal zero
							(: (2, 2, 0, 2C output
								(3:\ , 4;) push back
							)
							(0, 1, 0- decrement max length
						(6¤7§ end while
					)
					(3: push back
						\,, 4;
						_\1, 4;
						_\J, 4;
					)
					(1¤ return

				8§ add code
					(1: (1;, 2;) input length
						(0 input position
							§ (2: (1, 6, 2, 6= (0, 11, 5? while position not equal to length
								(3: (1; (1: (3, 2, 0, 2C (3;)) get char at position
									(2: (1, 6, 3:\#, 0= (0, 12, 5? if char is # then call parse comment
									(2: (1, 6, 3:\@, 0= (0, 15, 5? if char is @ then call parse function call
									(2: (1, 6, 3:\{, 0= (0, 16, 5? if char is { then call parse opening brace
									(2: (1, 6, 3:\}, 0= (0, 17, 5? if char is } then call parse closing brace
									(2: (1, 6, 3:\¤, 0= (0, 18, 5? if char is goto then call parse jump
									(: (4, 2, 0, 2C output
										S, 4; push back
									)
									§ continue
								)
								(0, 1, 0+ increment position
							(9¤11§ end while
						)
					)
					(3:\X, 4;) push back
					(2¤ return

				12§ parse comment
					(2: (2, 6, 3, 6= (0, 14, 5? while position not equal to length
						(3: (1; (1: (4, 2, 0, 2C (3;)) get char at position
							(2: (1, 6, 3:10, 0= (0, 13, 5? if char not equal new line
								(2, 6, 1, 0+ (0, 2, 3, 2C) increment position
						)
					(12¤13§)§ end while
					(10¤ return

				15§ parse function call
					(: (4, 2, 0, 2C output
						(3: push back
							_\P, 4;
							_\(, 4;
							_\,, 4;
							_\9, 4;
							_\,, 4;
							_\+, 4;
							_\S, 4;
							_\,, 4;
							_\5, 4;
							_\J, 4;
						)
					)
					(10¤ return

				16§ parse opening brace
					(: (4, 2, 0, 2C output
						(3: push back
							\S, 4;
						)
					)
					(10¤ return

				17§ parse closing brace
					(: (4, 2, 0, 2C output
						(3: push back
							\S, 4;
							_\,, 4;
							_\1, 4;
							_\J, 4;
							_\}, 4;
						)
					)
					(10¤ return

				18§ parse jump
					(: (4, 2, 0, 2C output
						(3: push back
							\,, 4;
							_\5, 4;
							_\J, 4;
						)
					)
					(10¤ return

				19§ fill prefix
					(1: (: (2, 2, 0, 2C (5;) (0, 1, 0- output length
						(7; position
							§ (2: (2, 6, 0, 0= (0, 21, 5? while output length not equal zero
								(1, 6, 10, 0% get digit
									(2, 6, 0, 6- (0, 10, 0/ (0, 2, 3, 2C) remove digit from output length
									(0, \0, 0+ add zero
									(: (4, 2, 0, 2C output
										(1: (3, 2, 0, 2C position
											(3: (3, 2, 0, 2C cast digit to char
												, 8; replace
											)
											(0, 1, 0- decrement position
										(0, 2, 3, 2C)
									)
								)
							(20¤21§ end while
						)
					)
					(3¤ return

				22§ add suffix
					(3: push back
						\(, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
						_\,, 4;
					)
					(1: (: (2, 2, 0, 2C (5;) output length
						(0 output position
							§ (2: (1, 6, 2, 6= (0, 25, 5? while position not equal to length
								(3: (: (4, 2, 0, 2C (1: (3, 2, 0, 2C (6;)) get char at position
									(2: (1, 6, 3:\§, 0= (0, 26, 5? if char is label then call save label
									§ continue
								)
								(0, 1, 0+ increment position
							(23¤25§ end while
						)
					)
					(3: push back
						\(, 4;
						_\:, 4;
						_\(, 4;
						_\:, 4;
						_\(, 4;
						_\1, 4;
						_\0, 4;
						_\,, 4;
						_\5, 4;
						_\J, 4;
						_\X, 4;
					)
					(4¤ return

				26§ save label
					(27 return destination
						(: (5, 2, 0, 2C output
							(3:\(, 4;) push back
							(1: (4, 6, 0, 6C (0, 1, 0- position
								(0, 6, 10, 0% get digit
									(1, 6, 0, 6- (0, 10, 0/ (0, 2, 2, 2C) remove digit from position
									(0, \0, 0+ add zero
									(28¤ call save label loop
									§ continue
									(: (3, 2, 0, 2C output
										(3: (2, 2, 0, 2C cast digit to char
											(4; push back
										)
									)
								)
							)
						)
					)
					(24¤ return

				28§ save label loop
					(2: (2, 6, 0, 0=! (0, 29, 5? if position is zero
						(1: (4, 2, 0, 2C return destination
							¤ return
					29§ else
					(30 return destination
						(: (4, 2, 0, 2C output
							(1: (4, 6, 0, 6C position
								(0, 6, 10, 0% get digit
									(1, 6, 0, 6- (0, 10, 0/ (0, 2, 2, 2C) remove digit from position
									(0, \0, 0+ add zero
									(2: (2, 6, 0, 0=! (0, 28, 5? if position is not zero then call save label loop
									§ continue
									(: (3, 2, 0, 2C output
										(3: (2, 2, 0, 2C cast digit to char
											(4; push back
										)
									)
								)
							)
						)
					)
					(1: (4, 2, 0, 2C return destination
						¤ return
				)"sv;
		auto compiler = LabelsCompiler::compile(callStackCompiler);
		constexpr auto maxSizeLength = String::getNumberLength(std::numeric_limits<std::size_t>::max());
		auto output = std::unique_ptr<std::basic_string<CharT>>(VirtualMachine::execute<
			std::basic_string<CharT>*,
			std::size_t,
			bool,
			CharT,
			const decltype(source)*>(
			compiler,
			&source,
			&decltype(source)::size,
			&decltype(source)::at,
			&std::basic_string<CharT>::push_back,
			&std::basic_string<CharT>::size,
			Type::getConstMemberFunction(&std::basic_string<CharT>::at),
			maxSizeLength,
			+[](std::basic_string<CharT>* s, std::size_t pos, CharT c) -> void { s->replace(pos, 1, 1, c); }));
		return std::basic_string<CharT>{std::move(*output)};
	}
}
