export module CppUtils.Thread.AsyncIStreamListener;

import std;
import CppUtils.Thread.ThreadLoop;

export namespace CppUtils::Thread
{
	// Todo: Recoder sans streams
	// avec epoll ? https://suchprogramming.com/epoll-in-3-easy-steps/
	template<class Type>
	class AsyncIStreamListener
	{
	public:
		inline AsyncIStreamListener() = delete;

		inline explicit AsyncIStreamListener(std::basic_istream<Type>& istream,
			const std::function<void(Type)>& function):
			m_istream{std::ref(istream)},
			m_function{std::move(function)},
			m_threadLoop{std::bind(&AsyncIStreamListener::listener, this)}
		{}

		inline AsyncIStreamListener(const AsyncIStreamListener&) = delete;
		inline AsyncIStreamListener(AsyncIStreamListener&&) noexcept = default;
		inline auto operator=(const AsyncIStreamListener&) -> AsyncIStreamListener& = delete;
		inline auto operator=(AsyncIStreamListener&&) noexcept -> AsyncIStreamListener& = default;

		[[nodiscard]] inline auto isRunning() const noexcept -> bool
		{
			return m_threadLoop.isRunning();
		}

		inline auto start() -> void
		{
			m_threadLoop.start();
		}

		inline auto stop() -> void
		{
			m_threadLoop.stop();
		}

	private:
		inline auto listener() -> void
		{
			Type value;
			m_istream.get() >> value;
			m_function(value);
		}

		std::reference_wrapper<std::istream> m_istream;
		std::function<void(Type)> m_function;
		ThreadLoop m_threadLoop;
	};
}
