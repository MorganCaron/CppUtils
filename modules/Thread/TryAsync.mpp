export module CppUtils.Thread.TryAsync;

import std;

export namespace CppUtils::Thread
{
    [[nodiscard]] inline auto tryAsync(auto&& function, auto&&... args) -> decltype(auto)
    {
        return std::async(std::launch::async, [function = std::forward<decltype(function)>(function), ...args = std::forward<decltype(args)>(args)]() mutable
            -> std::expected<std::invoke_result_t<decltype(function), decltype(args)...>, std::string> {
            try
            {
                if constexpr (std::is_void_v<std::invoke_result_t<decltype(function), decltype(args)...>>)
                    function(std::forward<decltype(args)>(args)...);
                else
                    return function(std::forward<decltype(args)>(args)...);
            }
            catch (const std::exception& exception)
            {
                return std::unexpected{exception.what()};
            }
            catch (...)
            {
                return std::unexpected{"Unknown exception occurred"};
            }
            return {};
        });
    }
}
