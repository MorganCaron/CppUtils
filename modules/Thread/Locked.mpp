export module CppUtils.Thread.Locked;

import std;

export namespace CppUtils::Thread
{
	template<class T>
	class Locked final
	{
	public:
		inline explicit Locked(auto&&... args):
			m_value{std::forward<decltype(args)>(args)...}
		{}

		class Accessor final
		{
		public:
			inline explicit Accessor(std::mutex& mutex, T& value):
				m_lockGuard{mutex},
				m_value{std::ref(value)}
			{}

			[[nodiscard]] inline auto operator*() noexcept -> decltype(auto)
			{
				return m_value.get();
			}

		private:
			mutable std::unique_lock<std::mutex> m_lockGuard;
			std::reference_wrapper<T> m_value;
		};

		[[nodiscard]] inline auto access() -> Accessor
		{
			return Accessor{m_mutex, m_value};
		}

	private:
		std::mutex m_mutex;
		T m_value;
	};

	template<class T>
	Locked(T) -> Locked<T>;
}
