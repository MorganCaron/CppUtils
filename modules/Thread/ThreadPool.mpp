export module CppUtils.Thread.ThreadPool;

import std;

import CppUtils.Thread.ThreadLoop;
import CppUtils.Thread.UniqueLocker;

export namespace CppUtils::Thread
{
	class ThreadPool final
	{
	private:
		using Task = std::function<void()>;

	public:
		explicit inline ThreadPool(std::size_t numberThreads = std::thread::hardware_concurrency()):
			m_numberThreads{numberThreads}
		{
			m_workers.reserve(m_numberThreads);
			for (auto i = 0uz; i < m_numberThreads; ++i)
				m_workers.emplace_back(std::bind(&ThreadPool::workerThread, this), std::bind(&ThreadPool::interruptFunction, this)).start();
		}

		~ThreadPool()
		{
			for (auto& worker : m_workers)
				worker.requestStop();
			for (auto& worker : m_workers)
				worker.stop();
		}

		template<typename Func, typename ... Args>
		inline auto call(Func&& function, Args&&... args) -> std::future<std::invoke_result_t<Func, Args...>>
		{
			using ReturnType = std::invoke_result_t<Func, Args...>;
			auto task = std::make_shared<std::packaged_task<ReturnType()>>(std::bind(
				std::forward<decltype(function)>(function),
				std::forward<decltype(args)>(args)...));
			auto future = task->get_future();
			{
				auto tasksQueueAccessor = m_tasksQueue.access();
				tasksQueueAccessor->emplace([task = std::move(task)] { std::invoke(*task); });
			}
			m_startWorkingCondition.notify_one();
			return future;
		}

		inline auto waitUntilFinished() -> void
		{
			auto lockGuard = std::unique_lock{m_standByMutex};
			if (m_activeWorkers != 0 and not isTasksQueueEmpty())
				m_standByCondition.wait(lockGuard, [this] {
					return m_activeWorkers == 0 and isTasksQueueEmpty();
				});
		}

	private:
		[[nodiscard]] inline auto isTasksQueueEmpty() const -> bool
		{
			auto tasksQueueAccessor = m_tasksQueue.access();
			return std::empty(tasksQueueAccessor.value());
		}

		inline auto workerThread() -> void
		{
			if (isTasksQueueEmpty())
			{
				auto tasksQueueAccessor = m_tasksQueue.access();
				m_startWorkingCondition.wait(tasksQueueAccessor.getLockGuard());
			}
			if (isTasksQueueEmpty())
				return;
			++m_activeWorkers;
			auto task = Task{};
			{
				auto tasksQueueAccessor = m_tasksQueue.access();
				task = std::move(tasksQueueAccessor->front());
				tasksQueueAccessor->pop();
			}
			task();
			if (--m_activeWorkers == 0)
				m_standByCondition.notify_all();
		}

		inline auto interruptFunction() -> void
		{
			m_startWorkingCondition.notify_all();
		}

		std::size_t m_numberThreads;
		std::atomic_size_t m_activeWorkers = 0;
		mutable UniqueLocker<std::queue<Task>> m_tasksQueue;
		std::condition_variable m_startWorkingCondition;
		std::mutex m_standByMutex;
		std::condition_variable m_standByCondition;
		std::vector<ThreadLoop> m_workers;
	};
}
