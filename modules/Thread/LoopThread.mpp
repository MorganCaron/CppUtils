export module CppUtils.Thread.LoopThread;

import std;
import CppUtils.Logger;

export namespace CppUtils::Thread
{
	class LoopThread final
	{
	public:
		inline LoopThread() = delete;

		inline explicit LoopThread(std::function<void()> function, std::function<void()> interruptFunction = nullptr):
			m_function{std::move(function)},
			m_interruptFunction{std::move(interruptFunction)}
		{}

		inline LoopThread(const LoopThread&) = delete;
		inline LoopThread(LoopThread&& src) noexcept:
			m_function{std::move(src.m_function)},
			m_running{src.isRunning()},
			m_thread{std::move(src.m_thread)}
		{}
		inline LoopThread& operator=(const LoopThread&) = delete;
		inline LoopThread& operator=(LoopThread&& rhs) noexcept
		{
			m_function = std::move(rhs.m_function);
			m_running = rhs.isRunning();
			m_thread = std::move(rhs.m_thread);
			return *this;
		}

		inline ~LoopThread()
		{
			stop();
		}

		[[nodiscard]] inline auto isRunning() const noexcept -> bool
		{
			return m_running.load();
		}

		inline auto start() -> void
		{
			if (isRunning())
				stop();
			m_thread = std::jthread{&LoopThread::run, this};
		}

		inline auto stop() -> void
		{
			if (not isRunning())
				return;
			m_running = false;
			if (m_interruptFunction)
				m_interruptFunction();
			m_thread.join();
		}

	private:
		inline auto run() -> void
		{
			try
			{
				m_running = true;
				while (isRunning())
					m_function();
			}
			catch (const std::exception& exception)
			{
				m_running = false;
				logException(std::runtime_error{std::format("Exception occurred during thread execution:\n{}", exception.what())});
				std::terminate();
			}
			catch (...)
			{
				m_running = false;
				Logger<"CppUtils">::print<"error">("Exception occurred during thread execution");
				std::terminate();
			}
		}

		std::function<void()> m_function;
		std::function<void()> m_interruptFunction;
		std::atomic_bool m_running = false;
		std::jthread m_thread;
	};
}
