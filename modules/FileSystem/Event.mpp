module;

#include <CppUtils/System/OS.hpp>

#if defined(OS_LINUX)
#	include <sys/inotify.h>
#endif

export module CppUtils.FileSystem.Event;

import std;
import CppUtils.String.Utility;

export namespace CppUtils::FileSystem
{
#if defined(OS_LINUX)
	using INotifyEvent = struct inotify_event;

	enum class Event : std::uint32_t
	{
		Access = IN_ACCESS,
		Attribute = IN_ATTRIB,
		CloseWrite = IN_CLOSE_WRITE,
		CloseNoWrite = IN_CLOSE_NOWRITE,
		Closed = IN_CLOSE,
		Created = IN_CREATE,
		Deleted = IN_DELETE,
		DeletedSelf = IN_DELETE_SELF,
		Modified = IN_MODIFY,
		MoveSelf = IN_MOVE_SELF,
		MovedFrom = IN_MOVED_FROM,
		MovedTo = IN_MOVED_TO,
		Moved = IN_MOVE,
		Open = IN_OPEN,
		IsDirectory = IN_ISDIR,
		Unmount = IN_UNMOUNT,
		QOverflow = IN_Q_OVERFLOW,
		Ignored = IN_IGNORED,
		Oneshot = IN_ONESHOT,
		All = IN_ALL_EVENTS
	};
#endif

	[[nodiscard]] inline constexpr auto operator&(Event lhs, Event rhs) -> bool
	{
		return static_cast<bool>(
			static_cast<std::underlying_type_t<Event>>(lhs) & static_cast<std::underlying_type_t<Event>>(rhs));
	}

	[[nodiscard]] inline constexpr auto operator|(Event lhs, Event rhs) -> Event
	{
		return static_cast<Event>(
			static_cast<std::underlying_type_t<Event>>(lhs) | static_cast<std::underlying_type_t<Event>>(rhs));
	}
}

namespace std
{
	template<class CharT>
	struct formatter<CppUtils::FileSystem::Event, CharT>
	{
		inline constexpr auto parse(std::format_parse_context& ctx) -> auto
		{
			return std::begin(ctx);
		}

		template<class FormatContext>
		inline constexpr auto format(CppUtils::FileSystem::Event event, FormatContext& context) const -> decltype(context.out())
		{
			using namespace std::literals;
			using Event = CppUtils::FileSystem::Event;
			auto&& out = context.out();
			auto string = ""s;
#if defined(OS_LINUX)
			{
				auto isCloseWrite = event & Event::CloseWrite;
				auto isCloseNoWrite = event & Event::CloseNoWrite;
				if (isCloseWrite and isCloseNoWrite)
					string += "close ";
				else if (isCloseWrite)
					string += "close (write) ";
				else if (isCloseNoWrite)
					string += "close (no write) ";
			}
			{
				auto isMovedSelf = event & Event::MoveSelf;
				auto isMovedFrom = event & Event::MovedFrom;
				auto isMovedTo = event & Event::MovedTo;
				if (isMovedSelf or (isMovedFrom and isMovedTo))
					string += "moved ";
				else if (isMovedFrom)
					string += "moved from ";
				else if (isMovedTo)
					string += "moved to ";
			}
			if (event & Event::Access)
				string += "access ";
			if (event & Event::Attribute)
				string += "attribute ";
			if (event & Event::Created)
				string += "created ";
			if (event & Event::Deleted or event & Event::DeletedSelf)
				string += "deleted ";
			if (event & Event::Modified)
				string += "modified ";
			if (event & Event::Open)
				string += "open ";
			if (event & Event::IsDirectory)
				string += "is directory ";
			if (event & Event::Unmount)
				string += "unmount ";
			if (event & Event::QOverflow)
				string += "Q overflow ";
			if (event & Event::Ignored)
				string += "ignored ";
			if (event & Event::Oneshot)
				string += "oneshot ";
#endif
			return std::format_to(out, "{}", CppUtils::String::rightTrimString(string));
		}
	};
}
