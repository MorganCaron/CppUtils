export module CppUtils.FileSystem.Directory;

import std;
import CppUtils.Type.Concept;

export namespace CppUtils::FileSystem
{
	inline auto forDirectories(
		const std::filesystem::path& directoryPath,
		auto&& function,
		bool recursively = false) -> void
	{
		if (not std::filesystem::exists(directoryPath) or
			not std::filesystem::is_directory(directoryPath))
			return;
		if (recursively)
		{
			for (const auto& directoryEntry : std::filesystem::recursive_directory_iterator(directoryPath))
				if (const auto& path = directoryEntry.path(); std::filesystem::is_directory(path))
					function(path);
		}
		else
			for (const auto& directoryEntry : std::filesystem::directory_iterator(directoryPath))
				if (const auto& path = directoryEntry.path(); std::filesystem::is_directory(path))
					function(path);
	}

	class TemporaryDirectory final
	{
	public:
		inline explicit TemporaryDirectory(std::string_view directoryName = "temp")
		{
			auto nbTemporaryFiles = 0u;
			do
			{
				m_tempDirectory = std::filesystem::temp_directory_path() / std::format("{}{}", directoryName, nbTemporaryFiles++);
			}
			while (std::filesystem::exists(m_tempDirectory));
			std::filesystem::create_directory(m_tempDirectory);
		}

		inline explicit TemporaryDirectory(auto&& function, [[maybe_unused]] auto&&... args):
			TemporaryDirectory{}
		{
			static_assert(not Type::Concept::HasReturnValue<decltype(function)>);
			function(m_tempDirectory, std::forward<decltype(args)>(args)...);
		}

		inline TemporaryDirectory(std::string_view directoryName, auto&& function, [[maybe_unused]] auto&&... args):
			TemporaryDirectory{directoryName}
		{
			static_assert(not Type::Concept::HasReturnValue<decltype(function)>);
			function(m_tempDirectory, std::forward<decltype(args)>(args)...);
		}

		inline ~TemporaryDirectory()
		{
			std::filesystem::remove_all(m_tempDirectory);
		}

		inline auto execute(auto&& function, auto&&... args) -> decltype(auto)
		{
			if constexpr (Type::Concept::HasReturnValue<decltype(function)>)
				return function(m_tempDirectory, std::forward<decltype(args)>(args)...);
			else
				function(m_tempDirectory, std::forward<decltype(args)>(args)...);
		}

	private:
		std::filesystem::path m_tempDirectory;
	};
}
