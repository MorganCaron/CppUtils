module;

#include <CppUtils/System/OS.hpp>

#if defined(OS_WINDOWS)
#	include <winsock2.h>
#	pragma comment(lib, "ws2_32.lib")
#elif defined(OS_LINUX)
#	include <sys/socket.h>
#	include <cerrno>
#endif

export module CppUtils.Network.Server;

import std;
import CppUtils.Network.Socket;

export namespace CppUtils::Network
{
	class Server: public Socket
	{
	public:
		explicit inline Server(
			Socket::Domain domain = Socket::Domain::IPV4,
			Socket::Type type = Socket::Type::TCP):
			Socket{domain, type}
		{
			setIPv6Only(false);
		}

		inline auto bind(std::uint16_t port) const -> void
		{
			auto address = makeAddress("", port);
			throwErrno(
				::bind(nativeHandle(), reinterpret_cast<sockaddr*>(&address.storage), address.length),
				"CppUtils::Network::Server::bind");
		}

		inline auto listen(std::size_t waitingQueue = 10) -> void
		{
			throwErrno(
				::listen(nativeHandle(), static_cast<int>(waitingQueue)),
				"CppUtils::Network::Server::listen");
		}

		[[nodiscard]] inline auto accept() -> std::optional<Socket>
		{
			auto clientSocket = ::accept(nativeHandle(), nullptr, nullptr);
#if defined(OS_WINDOWS)
			if (clientSocket == INVALID_SOCKET)
			{
				if (::WSAGetLastError() == WSAEWOULDBLOCK)
					return std::nullopt;
				throw std::runtime_error{"CppUtils::Network::Server::accept: Accept failed"};
			}
#elif defined(OS_LINUX)
			if (clientSocket < 0)
			{
				if (errno == EAGAIN or errno == EWOULDBLOCK)
					return std::nullopt;
				throw std::runtime_error{"CppUtils::Network::Server::accept: Accept failed"};
			}
#endif
			return Socket{clientSocket};
		}
	};
}
