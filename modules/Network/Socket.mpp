module;

#include <CppUtils/System/OS.hpp>

#if defined(OS_WINDOWS)
#	include <winsock2.h>
#	include <ws2tcpip.h> // for socklen_t
#elif defined(OS_LINUX) or defined(OS_MACOS)
#	include <sys/socket.h>
#	include <netinet/in.h>
#	include <arpa/inet.h>
#	include <fcntl.h>
#	include <unistd.h>
#	include <cerrno>
#endif

export module CppUtils.Network.Socket;

import std;
import CppUtils.Math.Endian;
import CppUtils.System.Error;
import CppUtils.Type.Concept;
import CppUtils.Chrono.Concept;

export namespace CppUtils::Network
{
#if defined(OS_WINDOWS)
	class WindowsSocketApi final
	{
	private:
		inline WindowsSocketApi()
		{
			WSADATA m_windowsSocketApiData;
			if (::WSAStartup(MAKEWORD(2, 2), std::addressof(m_windowsSocketApiData)) != 0)
				throw std::runtime_error{"Failed to initialize Winsock"};
		}

		inline ~WindowsSocketApi()
		{
			::WSACleanup();
		}

		WindowsSocketApi(const WindowsSocketApi&) = delete;
		WindowsSocketApi(WindowsSocketApi&&) noexcept = delete;

	public:
		static inline auto ensureIsinitialized() -> void
		{
			[[maybe_unused]] static auto windowsSocketApi = WindowsSocketApi{};
		}

		static inline auto throwErrno(int value, std::string_view message = "") -> int
		{
			if (value == SOCKET_ERROR) [[unlikely]]
				throw std::runtime_error{
					std::empty(message) ?
						std::format("{}", ::WSAGetLastError()) :
						std::format("{}: {}", message, ::WSAGetLastError())};
			return value;
		}
	};
#endif

#if defined(OS_WINDOWS)
	inline constexpr auto throwErrno = std::addressof(WindowsSocketApi::throwErrno);
#elif defined(OS_LINUX) or defined(OS_MACOS)
	inline constexpr auto throwErrno = std::addressof(System::throwErrno);
#endif

	class Socket
	{
	public:
#if defined(OS_WINDOWS)
		using NativeSocket = SOCKET;
#elif defined(OS_LINUX) or defined(OS_MACOS)
		using NativeSocket = int;
#endif

		enum class Domain : int
		{
			IPV4 = AF_INET,
			IPV6 = AF_INET6,
#if defined(OS_LINUX) or defined(OS_MACOS)
			Local = AF_UNIX
#endif
		};

		enum class Type : int
		{
			TCP = SOCK_STREAM,
			UDP = SOCK_DGRAM
		};

		explicit inline Socket(
			Domain domain = Domain::IPV4,
			Type type = Type::TCP):
			m_domain{domain}
		{
#if defined(OS_WINDOWS)
			WindowsSocketApi::ensureIsinitialized();
			m_socket = ::socket(static_cast<int>(domain), static_cast<int>(type), 0);
			if (m_socket == INVALID_SOCKET)
				throw std::runtime_error{"Socket creation failed"};
#elif defined(OS_LINUX) or defined(OS_MACOS)
			m_socket = ::socket(static_cast<int>(domain), static_cast<int>(type), 0);
			if (m_socket < 0)
				throw std::runtime_error{"Socket creation failed"};
#endif
		}

#if defined(OS_WINDOWS)
		explicit inline Socket(SOCKET socket) noexcept:
			m_socket{socket}
		{}
#elif defined(OS_LINUX) or defined(OS_MACOS)
		explicit inline Socket(int socket) noexcept:
			m_socket{socket}
		{}
#endif

		inline Socket(const Socket&) = delete;

		inline Socket(Socket&& other) noexcept:
			m_domain{other.m_domain},
			m_isBlocking{other.m_isBlocking},
			m_socket{other.m_socket}
		{
#if defined(OS_WINDOWS)
			other.m_socket = INVALID_SOCKET;
#elif defined(OS_LINUX) or defined(OS_MACOS)
			other.m_socket = -1;
#endif
		}

		inline auto operator=(const Socket&) -> Socket& = delete;

		inline auto operator=(Socket&& other) noexcept -> Socket&
		{
			if (this != &other)
			{
#if defined(OS_WINDOWS)
				if (m_socket != INVALID_SOCKET)
					::closesocket(m_socket);
#elif defined(OS_LINUX) or defined(OS_MACOS)
				if (m_socket != -1)
					::close(m_socket);
#endif
				m_domain = other.m_domain;
				m_isBlocking = other.m_isBlocking;
				m_socket = other.m_socket;
#if defined(OS_WINDOWS)
				other.m_socket = INVALID_SOCKET;
#elif defined(OS_LINUX) or defined(OS_MACOS)
				other.m_socket = -1;
#endif
			}
			return *this;
		}

		virtual inline ~Socket()
		{
#if defined(OS_WINDOWS)
			if (m_socket != INVALID_SOCKET)
				::closesocket(m_socket);
#elif defined(OS_LINUX) or defined(OS_MACOS)
			if (m_socket != -1)
				::close(m_socket);
#endif
		}

		inline auto setIPv6Only(bool enable) const -> void
		{
			if (m_domain != Domain::IPV6)
				return;
			if (not setSocketOption(
					m_socket,
					IPPROTO_IPV6,
					IPV6_V6ONLY,
					&enable,
					sizeof(enable)))
				throw std::runtime_error{"CppUtils::Network::Socket::setIPv6Only: Failed to set IPV6_V6ONLY option"};
		}

		inline auto setReuseAddress(bool enable) const -> void
		{
			auto value = enable ? 1 : 0;
			if (not setSocketOption(m_socket, SOL_SOCKET, SO_REUSEADDR, std::addressof(value), sizeof(value)))
				throw std::runtime_error{"CppUtils::Network::Socket::setReuseAddress: Failed to set SO_REUSEADDR option"};
		}

		inline auto setBlocking(bool enable) -> void
		{
			m_isBlocking = enable;
#if defined(OS_WINDOWS)
			auto mode = enable ? u_long{0} : u_long{1};
			if (::ioctlsocket(m_socket, static_cast<long>(FIONBIO), std::addressof(mode)) != 0)
				throw std::runtime_error{"CppUtils::Network::Socket::setBlocking: Failed to set blocking mode"};
#elif defined(OS_LINUX) or defined(OS_MACOS)
			auto flags = ::fcntl(m_socket, F_GETFL);
			if (flags == -1)
				throw std::runtime_error{"CppUtils::Network::Socket::setBlocking: Failed to get socket flags"};
			if (enable)
				flags &= ~O_NONBLOCK;
			else
				flags |= O_NONBLOCK;
			if (::fcntl(m_socket, F_SETFL, flags) == -1)
				throw std::runtime_error{"CppUtils::Network::Socket::setBlocking: Failed to set socket flags"};
#endif
		}

		[[nodiscard]] inline auto isBlocking() const -> bool
		{
#if defined(OS_WINDOWS)
			auto mode = u_long{};
			::ioctlsocket(m_socket, static_cast<long>(FIONBIO), std::addressof(mode));
			return mode == 0;
#elif defined(OS_LINUX) or defined(OS_MACOS)
			int flags = ::fcntl(m_socket, F_GETFL, 0);
			if (flags == -1)
				throw std::runtime_error{"CppUtils::Network::Socket::isBlocking: Failed to get socket flags"};
			return not(flags & O_NONBLOCK);
#endif
		}

		[[nodiscard]] inline auto isReadyForRead(const Chrono::Duration auto& timeout) const -> bool
		{
			using namespace std::chrono_literals;
			auto readSet = fd_set{};
			FD_ZERO(std::addressof(readSet));
			FD_SET(m_socket, std::addressof(readSet));

			auto timeValue = timeval{};
			timeValue.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();
			timeValue.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % 1s).count();

#ifdef OS_WINDOWS
			// TODO make implementation for windows
			// @see https://stackoverflow.com/questions/72759272/how-to-deal-with-socket-in-select-method
			auto result = -1;
#elif defined(OS_LINUX) or defined(OS_MACOS)
			auto result = select(m_socket + 1, std::addressof(readSet), nullptr, nullptr, std::addressof(timeValue));
#endif
			if (result < 0)
				throw std::runtime_error{"CppUtils::Network::Socket::isReadyForRead: Select failed"};
			return result > 0;
		}

	private:
		inline auto setSocketOption(NativeSocket socket, int level, int option, const void* value, std::size_t valueSize) const noexcept -> bool
		{
#if defined(OS_WINDOWS)
			return not ::setsockopt(socket, level, option, reinterpret_cast<const char*>(value), static_cast<int>(valueSize));
#elif defined(OS_LINUX) or defined(OS_MACOS)
			return not ::setsockopt(socket, level, option, value, static_cast<socklen_t>(valueSize));
#endif
		}

	protected:
		[[nodiscard]] inline auto nativeHandle() const noexcept -> NativeSocket
		{
			return m_socket;
		}

		struct Address final
		{
			sockaddr_storage storage = {};
			socklen_t length = 0;
		};

		inline auto makeAddress(std::string_view ip, std::uint16_t port) const -> Address
		{
			auto address = Address{};
			if (m_domain == Domain::IPV4)
			{
				auto* ipv4 = reinterpret_cast<sockaddr_in*>(std::addressof(address.storage));
				ipv4->sin_family = AF_INET;
				ipv4->sin_port = Math::toBigEndian(port);

				if (ip.empty())
					ipv4->sin_addr.s_addr = INADDR_ANY;
				else if (::inet_pton(AF_INET, std::data(ip), std::addressof(ipv4->sin_addr)) <= 0)
					throw std::invalid_argument{"CppUtils::Network::Socket::makeAddress: Invalid IPv4 address"};

				address.length = sizeof(sockaddr_in);
			}
			else if (m_domain == Domain::IPV6)
			{
				auto* ipv6 = reinterpret_cast<sockaddr_in6*>(std::addressof(address.storage));
				ipv6->sin6_family = AF_INET6;
				ipv6->sin6_port = Math::toBigEndian(port);

				if (ip.empty())
					ipv6->sin6_addr = in6addr_any;
				else if (::inet_pton(AF_INET6, std::data(ip), std::addressof(ipv6->sin6_addr)) <= 0)
					throw std::invalid_argument{"CppUtils::Network::Socket::makeAddress: Invalid IPv6 address"};

				address.length = sizeof(sockaddr_in6);
			}
			else
				throw std::invalid_argument{"CppUtils::Network::Socket::makeAddress: Unsupported domain"};
			return address;
		}

	public:
		inline auto send(const CppUtils::Type::TriviallyCopyable auto& data) -> void
		{
#ifdef OS_WINDOWS
			if (::send(m_socket, std::bit_cast<const char*>(std::addressof(data)), sizeof(decltype(data)), 0) < 0)
#elif defined(OS_LINUX) or defined(OS_MACOS)
			if (::send(m_socket, std::bit_cast<const void*>(std::addressof(data)), sizeof(decltype(data)), 0) < 0)
#endif
				throw std::runtime_error{"CppUtils::Network::Socket::send: Send failed"};
		}

		inline auto send(const std::vector<std::byte>& data) -> void
		{
			for (auto totalSent = 0uz; totalSent < std::size(data);)
#ifdef OS_WINDOWS
				if (auto bytesSent = ::send(m_socket, std::bit_cast<const char*>(std::data(data)) + totalSent, static_cast<int>(std::size(data) - totalSent), 0);
#elif defined(OS_LINUX) or defined(OS_MACOS)
				if (auto bytesSent = ::send(m_socket, std::data(data) + totalSent, std::size(data) - totalSent, 0);
#endif
					bytesSent < 0)
				{
#if defined(OS_WINDOWS)
					if (::WSAGetLastError() == WSAEWOULDBLOCK)
#elif defined(OS_LINUX) or defined(OS_MACOS)
					if (errno == EAGAIN or errno == EWOULDBLOCK)
#endif
						continue;
					throw std::runtime_error{"CppUtils::Network::Socket::send: Send failed"};
				}
				else
					totalSent += static_cast<std::size_t>(bytesSent);
		}

		inline auto send(std::string_view string) -> void
		{
#if defined(OS_WINDOWS)
			if (::send(m_socket, std::data(string), static_cast<int>(std::size(string)), 0) < 0)
#elif defined(OS_LINUX) or defined(OS_MACOS)
			if (::send(m_socket, std::data(string), std::size(string), 0) < 0)
#endif

				throw std::runtime_error{"CppUtils::Network::Socket::send: Send failed"};
		}

	private:
		[[nodiscard]] inline auto makeReceiveError() -> std::runtime_error
		{
#if defined(OS_WINDOWS)
			if (::WSAGetLastError() == WSAEWOULDBLOCK)
#elif defined(OS_LINUX) or defined(OS_MACOS)
			if (errno == EWOULDBLOCK)
#endif
				return std::runtime_error{"Socket is non-blocking and no data is available"};
			return std::runtime_error{"CppUtils::Network::Socket::receive: Reception failed"};
		}

	public:
		template<class T>
		[[nodiscard]] inline auto receive([[maybe_unused]] std::size_t bufferSize = 1'024) -> std::optional<T>
		{
			static_assert(CppUtils::Type::DefaultConstructible<T> and CppUtils::Type::TriviallyCopyable<T>);
			auto data = T{};
			for (auto totalBytesReceived = 0uz; totalBytesReceived < sizeof(T);)
			{
#if defined(OS_WINDOWS)
				const auto size = static_cast<int>(sizeof(T) - totalBytesReceived);
#elif defined(OS_LINUX) or defined(OS_MACOS)
				const auto size = sizeof(T) - totalBytesReceived;
#endif
				auto bytesReceived = ::recv(m_socket, reinterpret_cast<char*>(std::addressof(data)) + totalBytesReceived, size, 0);
				if (bytesReceived < 0)
				{
#if defined(OS_WINDOWS)
					if (WSAGetLastError() == WSAEWOULDBLOCK)
#elif defined(OS_LINUX) or defined(OS_MACOS)
					if (errno == EAGAIN)
						continue;
					if (errno == EWOULDBLOCK)
#endif
						return std::nullopt;
					throw makeReceiveError();
				}
				if (bytesReceived == 0)
					return std::nullopt;
				totalBytesReceived += static_cast<std::size_t>(bytesReceived);
			}
			return data;
		}

		template<>
		[[nodiscard]] inline auto receive<std::vector<std::byte>>(std::size_t bufferSize) -> std::optional<std::vector<std::byte>>
		{
			auto buffer = std::vector<std::byte>{bufferSize};
			buffer.reserve(bufferSize);
			for (auto totalBytesReceived = 0uz; totalBytesReceived < bufferSize;)
			{
#if defined(OS_WINDOWS)
				auto bytesReceived = ::recv(m_socket, std::bit_cast<char*>(std::data(buffer)) + totalBytesReceived, static_cast<int>(bufferSize - totalBytesReceived), 0);
#elif defined(OS_LINUX) or defined(OS_MACOS)
				auto bytesReceived = ::recv(m_socket, std::data(buffer) + totalBytesReceived, bufferSize - totalBytesReceived, 0);
#endif
				if (bytesReceived < 0)
				{
#if defined(OS_WINDOWS)
					if (WSAGetLastError() == WSAEWOULDBLOCK)
#elif defined(OS_LINUX) or defined(OS_MACOS)
					if (errno == EAGAIN or errno == EWOULDBLOCK)
#endif
						continue;
					throw makeReceiveError();
				}
				if (bytesReceived == 0)
					return std::nullopt;
				totalBytesReceived += static_cast<std::size_t>(bytesReceived);
			}
			return buffer;
		}

		template<>
		[[nodiscard]] inline auto receive<std::string>(std::size_t bufferSize) -> std::optional<std::string>
		{
			auto buffer = receive<std::vector<std::byte>>(bufferSize);
			if (not buffer.has_value())
				return std::nullopt;
			return std::string(reinterpret_cast<const char*>(std::data(buffer.value())), std::size(buffer.value()));
		}

	private:
		Domain m_domain;
		bool m_isBlocking = true;
		NativeSocket m_socket;
	};
}
