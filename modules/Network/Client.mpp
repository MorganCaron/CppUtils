module;

#include <CppUtils/System/OS.hpp>

#if defined(OS_WINDOWS)
#	include <winsock2.h>
#elif defined(OS_LINUX)
#	include <sys/socket.h>
#endif

export module CppUtils.Network.Client;

import std;
import CppUtils.Network.Socket;

export namespace CppUtils::Network
{
	class Client final: public Socket
	{
	public:
		explicit inline Client(Domain domain = Domain::IPV4, Type type = Type::TCP):
			Socket{domain, type}
		{}

		inline auto connect(std::string_view ip, std::uint16_t port) const -> void
		{
			auto address = makeAddress(ip.empty() ? "127.0.0.1" : ip, port);
			if (address.length == 0)
				throw std::runtime_error{"CppUtils::Network::Client::connect: Invalid address length"};
#if defined(OS_WINDOWS)
			if (nativeHandle() == INVALID_SOCKET)
#else
			if (nativeHandle() == -1)
#endif
				throw std::runtime_error{"CppUtils::Network::Client::connect: Invalid socket handle"};
			throwErrno(
				::connect(nativeHandle(), reinterpret_cast<sockaddr*>(&address.storage), address.length),
				"CppUtils::Network::Client::connect");
		}
	};
}
