export module CppUtils.String.Utility;

import std;

import CppUtils.Math;
import CppUtils.String.Concept;

export namespace CppUtils::String
{
	inline const auto escapedChars = std::unordered_map<char, char>{
		{'0', '\0'},
		{'a', '\a'},
		{'b', '\b'},
		{'f', '\f'},
		{'n', '\n'},
		{'r', '\r'},
		{'t', '\t'},
		{'v', '\v'}};

	template<Concept::Char CharT>
	[[nodiscard]] inline auto reverseEscapedChar(CharT c) noexcept -> std::basic_string<CharT>
	{
		for (const auto& [readableChar, escapedChar] : String::escapedChars)
			if (escapedChar == c)
				return std::basic_string<CharT>{"\\"} + readableChar;
		return std::basic_string<CharT>{c};
	}

	[[nodiscard]] inline auto concatenateStringsWithDelimiter(const std::vector<std::string>& strings, std::string_view delimiter) -> std::string
	{
		return std::accumulate(std::cbegin(strings), std::cend(strings), std::string{}, [delimiter](const std::string& lhs, const std::string& rhs) {
			return lhs.empty() ? rhs : (lhs + delimiter.data() + rhs);
		});
	}

	[[nodiscard]] inline auto concatenateStringsWithDelimiter(const std::vector<std::string_view>& strings, std::string_view delimiter) -> std::string
	{
		return std::accumulate(std::cbegin(strings), std::cend(strings), std::string{}, [delimiter](std::string_view lhs, std::string_view rhs) {
			return lhs.empty() ? std::string{rhs} : (std::string{lhs} + std::string{delimiter} + std::string{rhs});
		});
	}

	[[nodiscard]] inline auto leftTrimString(std::string_view stringView) -> std::string_view
	{
		auto prefixLength = static_cast<std::size_t>(std::distance(std::cbegin(stringView),
			std::find_if(std::cbegin(stringView), std::cend(stringView), [](char c) {
			return !std::isspace(c);
		})));
		stringView.remove_prefix(prefixLength);
		return stringView;
	}

	[[nodiscard]] inline auto rightTrimString(std::string_view stringView) -> std::string_view
	{
		auto suffixLength = static_cast<std::size_t>(std::distance(std::crbegin(stringView),
			std::find_if(std::crbegin(stringView), std::crend(stringView), [](char c) {
			return !std::isspace(c);
		})));
		stringView.remove_suffix(suffixLength);
		return stringView;
	}

	[[nodiscard]] inline auto trimString(std::string_view stringView) -> std::string_view
	{
		return rightTrimString(leftTrimString(stringView));
	}

	[[nodiscard]] inline auto getPrintableChar(char c) -> std::string
	{
		using namespace std::literals;
		return std::isprint(c) ? ("'"s + c + '\'') : std::to_string(c);
	}

	[[nodiscard]] inline constexpr auto isUppercase(auto c) noexcept -> bool
	{
		return (c >= 'A' and c <= 'Z');
	}

	[[nodiscard]] inline constexpr auto isLowercase(auto c) noexcept -> bool
	{
		return (c >= 'a' and c <= 'z');
	}

	[[nodiscard]] inline constexpr auto toLowercase(auto c) noexcept
	{
		return isUppercase(c) ? c + ('a' - 'A') : c;
	}

	[[nodiscard]] inline constexpr auto toUppercase(auto c) noexcept
	{
		return isLowercase(c) ? c - ('a' - 'A') : c;
	}

	template<class CharT>
	[[nodiscard]] inline constexpr auto toLowercase(std::basic_string_view<CharT> originalString) -> std::basic_string<CharT>
	{
		auto result = std::basic_string<CharT>{originalString};
		for (auto& c : result)
			c = toLowercase(c);
		return result;
	}

	template<class CharT>
	[[nodiscard]] inline constexpr auto toUppercase(std::basic_string_view<CharT> originalString) -> std::basic_string<CharT>
	{
		auto result = std::basic_string<CharT>{originalString};
		for (auto& c : result)
			c = toUppercase(c);
		return result;
	}

	[[nodiscard]] inline constexpr auto formatValue(auto value)
	{
		if constexpr (std::formattable<decltype(value), char>)
			return std::format("{}", value);
		else
			return "<non printable>";
	}

	[[nodiscard]] inline constexpr auto toAscii(const Concept::Text auto& string) -> std::string
	{
		auto asciiString = std::string{};
		std::transform(std::cbegin(string), std::cend(string), std::back_inserter(asciiString), [](auto c) -> char {
			return c < 128 ? static_cast<char>(c) : '?';
		});
		return asciiString;
	}

	// Todo: gérer les flottants
	[[nodiscard]] inline constexpr auto getNumberLength(std::integral auto number, std::size_t base = 10) -> std::size_t
	{
		if (number == 0)
			return 1uz;
		auto length = 0uz;
		if constexpr (std::signed_integral<decltype(number)>)
			if (number < 0)
				++length;
		for (auto unsignedNumber = Math::absolute(number); unsignedNumber; unsignedNumber /= base)
			++length;
		return length;
	}

	// Todo: gérer les flottants
	template<std::size_t base = 10, class CharT = char>
	requires (base > 1 and base < 37)
	[[nodiscard]] inline constexpr auto toString(std::integral auto number) -> std::basic_string<CharT>
	{
		if (number == 0)
			return std::basic_string<CharT>{"0"};
		auto digits = std::basic_string_view<CharT>{"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
		auto string = std::basic_string<CharT>(getNumberLength(number, base), ' ');
		if constexpr (std::signed_integral<decltype(number)>)
			if (number < 0)
				string[0] = '-';
		auto unsignedNumber = Math::absolute(number);
		for (auto i = std::size(string); unsignedNumber != 0; unsignedNumber /= base)
			string[--i] = digits[unsignedNumber % base];
		return string;
	}

	// Todo: function splitString (donne un std::vector<std::string> à partir d'un string comportant des espaces
}
