export module CppUtils.String.HashTable;

import std;

import CppUtils.String.Concept;
import CppUtils.String.Hash;
import CppUtils.String.Utility;

export namespace CppUtils::String
{
	template<Char CharT>
	using HashTable = std::unordered_map<Token, std::basic_string<CharT>>;

	template<Char CharT>
	[[nodiscard]] inline auto makeHashTable(Text<CharT> auto&&... texts) -> decltype(auto)
	{
		return HashTable<CharT>{std::make_pair(hash(texts), std::forward<decltype(texts)>(texts))...};
	}

	template<Char CharT>
	[[nodiscard]] inline auto getNameOrValue(Token token, const HashTable<CharT>& tokenNames) -> auto
	{
		using namespace std::literals;

		if (tokenNames.contains(token))
		{
			if (const auto& name = tokenNames.at(token); not std::empty(name))
				return std::format("{}", name);
			else
				return std::format(R"("")");
		}
		if (token <= std::numeric_limits<wchar_t>::max())
		{
			auto c = static_cast<char>(token);
			if (std::isprint(c))
				return std::format("{} '{}'", token, c);
			if (isEscapable(c))
				return std::format(R"({} \'{}')", token, unescape(c));
		}
		return std::format("{}", token);
	}
}
