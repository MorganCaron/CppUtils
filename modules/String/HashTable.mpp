export module CppUtils.String.HashTable;

import std;

import CppUtils.String.Hash;
import CppUtils.String.Utility;

export namespace CppUtils::String
{
	using HashTable = std::unordered_map<String::Token, std::string>;

	[[nodiscard]] inline auto makeHashTable(auto... sv) -> HashTable
	{
		return HashTable{std::make_pair(String::hash(sv), sv)...};
	}

	template<class CharT>
	[[nodiscard]] inline auto getNameOrValue(Token token, const HashTable& tokenNames) -> auto
	{
		using namespace std::literals;

		if (tokenNames.contains(token))
		{
			if (const auto& name = tokenNames.at(token); !std::empty(name))
				return std::format("{}", name);
			else
				return std::format(R"("")");
		}
		if (token <= std::numeric_limits<wchar_t>::max())
		{
			auto c = static_cast<char>(token);
			if (std::isprint(c))
				return std::format("{} '{}'", token, c);
			for (const auto& [readableChar, escapedChar] : String::escapedChars)
				if (escapedChar == c)
					return std::format(R"({} \'{}')", token, readableChar);
		}
		return std::format("{}", token);
	}
}
