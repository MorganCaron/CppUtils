export module CppUtils.String.Concept;

import std;

import CppUtils.Type.Concept;

export namespace CppUtils::String
{
	template<class T>
	concept Char = Type::IsOneOf<T, char, wchar_t, char8_t, char16_t, char32_t>;

	template<class T>
	concept String = Type::Specializes<T, std::basic_string>;

	template<class T>
	concept StringView = Type::Specializes<T, std::basic_string_view>;

	template<class T, class... Chars>
	concept Text = (std::is_convertible_v<std::remove_cvref_t<T>, std::basic_string_view<Chars>> or ...);

	template<class T>
	concept GenericText = Text<T, char, char8_t, char16_t, char32_t, wchar_t>;

	template<GenericText T>
	using TextCharT = typename decltype(std::basic_string_view{std::declval<T>()})::value_type;

	template<class T>
	concept Formattable = requires (T t) {
		{ std::formatter<T>{} };
	};
}
