export module CppUtils.Terminal.Spinner;

import std;
import CppUtils.Terminal.Area;
import CppUtils.Container.Size;
import CppUtils.Chrono.Concept;
export import CppUtils.Terminal.FixedAreaBuffer;

export namespace CppUtils::Terminal
{
	template<std::size_t Width, std::size_t Height, std::size_t NbFrames, Chrono::Duration Duration = std::chrono::milliseconds>
	class Spinner final: public Widget
	{
	public:
		using Frame = FixedAreaBuffer<Width, Height>;
		using Frames = std::array<Frame, NbFrames>;
		static constexpr auto size = Frame::size;

		inline Spinner(const Frames& frames, const Duration& duration = std::chrono::milliseconds{50}):
			m_frames{frames},
			m_duration{duration}
		{}

		inline auto draw(WritableAreaView& view) noexcept -> void
		{
			if (std::empty(m_frames))
				return;
			view.applyArea(m_frames[m_frame]);
			if (++m_frame == std::size(m_frames))
				m_frame = 0;
			drawFinished();
			requestUpdate(m_duration);
		}

	private:
		std::size_t m_frame = 0;
		const Frames& m_frames;
		Duration m_duration;
	};

	template<std::size_t Width, std::size_t Height, std::size_t NbFrames, Chrono::Duration Duration = std::chrono::milliseconds>
	Spinner(std::array<FixedAreaBuffer<Width, Height>, NbFrames>&& frames, const Duration& duration = std::chrono::milliseconds{50}) -> Spinner<Width, Height, NbFrames, Duration>;
}
