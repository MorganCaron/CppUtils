module;

#include <stdio.h>

export module CppUtils.Terminal.Canvas;

import std;
import CppUtils.Container.Size;
import CppUtils.Terminal.Utility;
import CppUtils.Terminal.Size;
import CppUtils.Terminal.Cursor;

export namespace CppUtils::Terminal
{
	class Canvas final
	{
	public:
		struct StyledSegment final
		{
			std::size_t begin, end;
		};

		inline Canvas(Container::Size2 size = getTerminalSize()):
			m_size{size},
			m_buffer{std::string(m_size.width() * m_size.height(), ' ')}
		{
			if (m_size.width() == 0 or m_size.height() == 0)
				return;
			std::print("{}", std::string(m_size.height() - 1, '\n'));
			update();
		}

		inline ~Canvas()
		{
			std::puts("");
		}

		[[nodiscard]] inline constexpr auto getSize() const noexcept -> const auto&
		{
			return m_size;
		}

		inline auto fill(char c) noexcept -> void
		{
			m_buffer.assign(m_size.width() * m_size.height(), c);
		}

		[[nodiscard]] inline auto getOrigin() const noexcept -> auto
		{
			return Container::Size2{0, getTerminalSize().height() - m_size.height()};
		}

		inline auto print(Container::Size2 position, std::string_view text) noexcept -> void
		{
			const auto offset = position.x() + position.y() * m_size.width();
			if (offset >= std::size(m_buffer))
				return;

			std::copy_n(
				std::cbegin(text),
				std::min(std::size(text), std::size(m_buffer) - offset),
				std::begin(m_buffer) + static_cast<std::ptrdiff_t>(offset));
		}

		inline auto update() -> void
		{
			{
				auto cursorPosition = getTerminalSize();
				cursorPosition.x() = 0;
				cursorPosition.y() -= m_size.height();
				setCursorPosition(cursorPosition);
			}
			const auto buffer = std::string_view{m_buffer};
			for (auto lineNb = 0uz; lineNb < m_size.height();)
			{
				std::fwrite(std::data(buffer.substr(lineNb * m_size.width(), m_size.width())), sizeof(decltype(m_buffer)::value_type), m_size.width(), stdout);
				if (++lineNb != m_size.height())
					std::fwrite("\n", 1, 1, stdout);
			}
			std::fflush(stdout);
		}

	private:
		Container::Size2 m_size;
		std::string m_buffer;
		std::vector<StyledSegment> m_attributes;
	};
}
