export module CppUtils.Terminal.Area:Viewport;

import CppUtils.Container.Size;
import CppUtils.Math.Utility;

export namespace CppUtils::Terminal
{
	class Viewport final
	{
	public:
		inline Viewport(const Container::Size2& size = {0, 0}, const Container::Size2& position = {0, 0}):
			m_size{size},
			m_position{position}
		{}

		[[nodiscard]] inline auto getSize() const noexcept -> const auto&
		{
			return m_size;
		}

		[[nodiscard]] inline auto getPosition() const noexcept -> const auto&
		{
			return m_position;
		}

		[[nodiscard]] inline auto getTopLeft() const noexcept -> const Container::Size2&
		{
			return m_position;
		}

		[[nodiscard]] inline auto getBottomRight() const noexcept -> Container::Size2
		{
			return {m_position.x() + m_size.width() - 1, m_position.y() + m_size.height() - 1};
		}

		[[nodiscard]] inline auto contains(const Container::Size2& point) const noexcept -> bool
		{
			auto topLeft = getTopLeft();
			auto bottomRight = getBottomRight();
			return Math::isBetween(point.x(), topLeft.x(), bottomRight.x()) and
				Math::isBetween(point.y(), topLeft.y(), bottomRight.y());
		}

		[[nodiscard]] inline auto contains(const Viewport& viewport) const noexcept -> bool
		{
			return contains(viewport.getTopLeft()) and contains(viewport.getBottomRight());
		}

		inline auto forEach(auto&& function) const noexcept -> void
		{
			for (auto y = 0uz; y < m_size.height(); ++y)
				for (auto x = 0uz; x < m_size.width(); ++x)
					function(Container::Size2{m_position.x() + x, m_position.y() + y});
		}

	private:
		Container::Size2 m_size, m_position;
	};

	[[nodiscard]] inline auto operator+(const Viewport& lhs, const Viewport& rhs) noexcept -> Viewport
	{
		return Viewport{lhs.getSize() + rhs.getSize(), lhs.getPosition() + rhs.getPosition()};
	}

	[[nodiscard]] inline auto operator-(const Viewport& lhs, const Viewport& rhs) noexcept -> Viewport
	{
		return Viewport{lhs.getSize() - rhs.getSize(), lhs.getPosition() - rhs.getPosition()};
	}
}
