module;

#include <CppUtils/System/Windows.hpp>

#if defined(OS_LINUX) or defined(OS_MACOS)
#	include <sys/ioctl.h>
#	include <unistd.h>
#endif

export module CppUtils.Terminal.Size;

import std;
import CppUtils.Container.Size;

export namespace CppUtils::Terminal
{
#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getTerminalSize() -> Container::Size2
	{
		auto consoleScreenBufferInfo = CONSOLE_SCREEN_BUFFER_INFO{};
		GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), std::addressof(consoleScreenBufferInfo));
		return Container::Size2{
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Right - consoleScreenBufferInfo.srWindow.Left + 1),
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Bottom - consoleScreenBufferInfo.srWindow.Top + 1)};
	}
#elif defined(OS_LINUX) or defined(OS_MACOS)
	[[nodiscard]] inline auto getTerminalSize() -> Container::Size2
	{
		auto windowsSize = winsize{};
		ioctl(STDOUT_FILENO, TIOCGWINSZ, std::addressof(windowsSize));
		return Container::Size2{
			static_cast<std::size_t>(windowsSize.ws_col),
			static_cast<std::size_t>(windowsSize.ws_row)};
	}
#endif
}
