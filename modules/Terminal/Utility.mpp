module;

#include <cstdio>

#include <CppUtils/System/Windows.hpp>

#if defined(OS_MAC) or defined(OS_LINUX)
#	include <sys/ioctl.h>
#	include <unistd.h>
#	include <termios.h>
#endif

export module CppUtils.Terminal.Utility;

import std;
import CppUtils.Container.Size2d;
import CppUtils.System.Type;
import CppUtils.String.Concept;
import CppUtils.Terminal.RawTerminal;

export namespace CppUtils::Terminal
{
	inline auto setConsoleOutputUTF8() -> void
	{
#if defined(OS_WINDOWS)
		SetConsoleOutputCP(CP_UTF8);
#endif
	}

#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getTerminalHandle(std::FILE* file) -> System::Handle
	{
		auto terminalHandle = System::InvalidHandle;
		if (file == stdout)
			terminalHandle = GetStdHandle(STD_OUTPUT_HANDLE);
		else if (file == stderr)
			terminalHandle = GetStdHandle(STD_ERROR_HANDLE);
		return terminalHandle;
	}

	[[nodiscard]] inline auto getTerminalHandle(std::ostream& stream) -> System::Handle
	{
		auto terminalHandle = System::InvalidHandle;
		if (&stream == &std::cout)
			terminalHandle = GetStdHandle(STD_OUTPUT_HANDLE);
		else if (&stream == &std::cerr)
			terminalHandle = GetStdHandle(STD_ERROR_HANDLE);
		return terminalHandle;
	}
#else
	[[nodiscard]] inline auto getTerminalHandle([[maybe_unused]] std::FILE* file) -> System::Handle
	{
		return System::InvalidHandle;
	}

	[[nodiscard]] inline auto getTerminalHandle([[maybe_unused]] std::ostream& stream) -> System::Handle
	{
		return System::InvalidHandle;
	}
#endif

#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getTerminalSize() -> Container::Size2d<>
	{
		auto consoleScreenBufferInfo = CONSOLE_SCREEN_BUFFER_INFO{};
		GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &consoleScreenBufferInfo);
		return Container::Size2d<>{
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Right - consoleScreenBufferInfo.srWindow.Left + 1),
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Bottom - consoleScreenBufferInfo.srWindow.Top + 1)};
	}
#elif defined(OS_MAC) or defined(OS_LINUX)
	[[nodiscard]] inline auto getTerminalSize() -> Container::Size2d<>
	{
		auto windowsSize = winsize{};
		ioctl(STDOUT_FILENO, TIOCGWINSZ, &windowsSize);
		return Container::Size2d<>{
			windowsSize.ws_col,
			windowsSize.ws_row};
	}
#endif

	inline auto getTerminalTitle() -> std::wstring
	{
#if defined(OS_WINDOWS)
		auto title = std::wstring{};
		constexpr auto size = 256uz;
		title.resize(size);
		::GetConsoleTitleW(std::data(title), size);
		return title;
#elif defined(OS_MAC) or defined(OS_LINUX)
		using namespace std::literals;

		auto rawTerminal = RawTerminal{};
		std::fwrite("\033]21;?\a", 1, 7, stdout);
		std::fflush(stdout);

		const auto response = rawTerminal.read('\a');
		if (constexpr auto prefix = "\033]21;"sv; response.starts_with(prefix))
			return std::wstring{std::cbegin(response) + std::size(prefix), std::cend(response)};
		return std::wstring{};
#endif
	}

	inline auto setTerminalTitle(const String::GenericText auto& title) -> void
	{
#if defined(OS_WINDOWS)
		::SetConsoleTitleW(std::data(title));
#elif defined(OS_MAC) or defined(OS_LINUX)
		std::print("\x1B]0;{}\a", title);
		std::fflush(stdout);
#endif
	}

	template<class String>
	class TerminalTitle final
	{
	public:
		inline TerminalTitle(String title):
			m_oldTitle{getTerminalTitle()}
		{
			setTerminalTitle(title);
		}

		inline ~TerminalTitle()
		{
			setTerminalTitle(m_oldTitle);
		}

	private:
		String m_oldTitle;
	};

#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getCursorPosition() -> std::expected<Container::Size2d<>, std::string_view>
	{
		auto consoleScreenBufferInfo = CONSOLE_SCREEN_BUFFER_INFO{};
		GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &consoleScreenBufferInfo);
		return Container::Size2d<>{
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.X),
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Y)};
	}
#elif defined(OS_MAC) or defined(OS_LINUX)
	[[nodiscard]] inline auto getCursorPosition() -> std::expected<Container::Size2d<>, std::string_view>
	{
		using namespace std::literals;

		auto rawTerminal = RawTerminal{};
		std::print("\x1b[6n");
		std::fflush(stdout);

		const auto response = rawTerminal.read('R');
		auto rows = 0, columns = 0;
		if (std::sscanf(response.c_str(), "\x1b[%d;%d", &rows, &columns) == 2)
			return Container::Size2d<>{static_cast<std::size_t>(columns - 1), static_cast<std::size_t>(rows - 1)};
		return std::unexpected{"Cursor position retrieval failure"sv};
	}
#endif

#if defined(OS_WINDOWS)
	inline auto setCursorPosition(Container::Size2d<> position) -> void
	{
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), COORD{position.x, position.y});
	}
#elif defined(OS_MAC) or defined(OS_LINUX)
	inline auto setCursorPosition([[maybe_unused]] Container::Size2d<> position) -> void
	{
		std::print("\x1b[{};{}H", position.y + 1, position.x + 1);
	}
#endif
}
