module;

#include <cstdio>

#include <CppUtils/System/Windows.hpp>

#if defined(OS_MAC) or defined(OS_LINUX)
#	include <sys/ioctl.h>
#	include <unistd.h>
#endif

export module CppUtils.Terminal.Utility;

import std;
import CppUtils.Container.Size2d;
import CppUtils.System.Type;

export namespace CppUtils::Terminal
{
	inline auto setConsoleOutputUTF8() -> void
	{
#if defined(OS_WINDOWS)
		SetConsoleOutputCP(CP_UTF8);
#endif
	}

#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getTerminalHandle(std::FILE* file) -> System::Handle
	{
		auto terminalHandle = System::InvalidHandle;
		if (file == stdout)
			terminalHandle = GetStdHandle(STD_OUTPUT_HANDLE);
		else if (file == stderr)
			terminalHandle = GetStdHandle(STD_ERROR_HANDLE);
		return terminalHandle;
	}

	[[nodiscard]] inline auto getTerminalHandle(std::ostream& stream) -> System::Handle
	{
		auto terminalHandle = System::InvalidHandle;
		if (&stream == &std::cout)
			terminalHandle = GetStdHandle(STD_OUTPUT_HANDLE);
		else if (&stream == &std::cerr)
			terminalHandle = GetStdHandle(STD_ERROR_HANDLE);
		return terminalHandle;
	}
#else
	[[nodiscard]] inline auto getTerminalHandle([[maybe_unused]] std::FILE* file) -> System::Handle
	{
		return System::InvalidHandle;
	}

	[[nodiscard]] inline auto getTerminalHandle([[maybe_unused]] std::ostream& stream) -> System::Handle
	{
		return System::InvalidHandle;
	}
#endif

#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getTerminalSize() -> Container::Size2d<>
	{
		auto consoleScreenBufferInfo = CONSOLE_SCREEN_BUFFER_INFO{};
		GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &consoleScreenBufferInfo);
		return Container::Size2d<>{
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Right - consoleScreenBufferInfo.srWindow.Left + 1),
			static_cast<std::size_t>(consoleScreenBufferInfo.srWindow.Bottom - consoleScreenBufferInfo.srWindow.Top + 1)};
	}
#elif defined(OS_MAC) or defined(OS_LINUX)
	[[nodiscard]] inline auto getTerminalSize() -> Container::Size2d<>
	{
		auto windowsSize = winsize{};
		ioctl(STDOUT_FILENO, TIOCGWINSZ, &windowsSize);
		return Container::Size2d<>{
			windowsSize.ws_col,
			windowsSize.ws_row};
	}
#endif
}
