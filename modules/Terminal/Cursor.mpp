module;

#include <cstdio>

#include <CppUtils/System/Windows.hpp>

export module CppUtils.Terminal.Cursor;

import std;
import CppUtils.Container.Size;
import CppUtils.Terminal.RawTerminal;

export namespace CppUtils::Terminal
{
#if defined(OS_WINDOWS)
	[[nodiscard]] inline auto getCursorPosition() -> std::expected<Container::Size2, std::string_view>
	{
		auto consoleScreenBufferInfo = CONSOLE_SCREEN_BUFFER_INFO{};
		GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &consoleScreenBufferInfo);
		return Container::Size2{
			consoleScreenBufferInfo.srWindow.Left,
			consoleScreenBufferInfo.srWindow.Top};
	}
#elif defined(OS_LINUX) or defined(OS_MACOS)
	[[nodiscard]] inline auto getCursorPosition() -> std::expected<Container::Size2, std::string_view>
	{
		using namespace std::literals;

		auto rawTerminal = RawTerminal{};
		std::print("\x1b[6n");
		std::fflush(stdout);

		const auto response = rawTerminal.read('R');
		auto rows = 0, columns = 0;
		if (std::sscanf(response.c_str(), "\x1b[%d;%d", std::addressof(rows), std::addressof(columns)) == 2)
			return Container::Size2{columns, rows};
		return std::unexpected{"Cursor position retrieval failure"sv};
	}
#endif

#if defined(OS_WINDOWS)
	inline auto setCursorPosition(Container::Size2 position) -> void
	{
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), COORD{static_cast<SHORT>(position.x()), static_cast<SHORT>(position.y())});
	}
#elif defined(OS_LINUX) or defined(OS_MACOS)
	inline auto setCursorPosition([[maybe_unused]] Container::Size2 position) -> void
	{
		std::print("\x1b[{};{}H", position.y(), position.x());
	}
#endif
}
