module;

#include <CppUtils/System/Windows.hpp>

export module CppUtils.Terminal.TextModifier;

import std;
import CppUtils.Terminal.BackgroundColor;
import CppUtils.Terminal.Utility;
import CppUtils.Terminal.TextColor;
import CppUtils.Terminal.TextStyle;

export namespace CppUtils::Terminal
{
	using namespace std::literals;

#if defined(OS_LINUX) or defined(OS_MACOS)
	namespace ANSIEscapeCode
	{
		[[maybe_unused]] inline constexpr auto Reset = "\x1B[0m"sv; // \x1B[39m\x1B[49m
		[[maybe_unused]] inline constexpr auto EraseCurrentLine = "\x1B[2K\r"sv;
		[[maybe_unused]] inline constexpr auto MoveCursorUp = "\x1B[1A"sv;
	}
#endif

	class TextModifier final
	{
	public:
		TextModifier() = default;

		inline explicit TextModifier(
			std::FILE* file,
			TextColor::TextColorEnum textColor = TextColor::TextColorEnum::Default,
			BackgroundColor::BackgroundColorEnum backgroundColor = BackgroundColor::BackgroundColorEnum::Default,
			[[maybe_unused]] std::optional<TextStyle::TextStyleEnum> textStyle = std::nullopt):
			m_modify{true},
			m_file{file}
		{
			[[maybe_unused]] auto text = TextColor::getTextColorCode(textColor);
			[[maybe_unused]] auto background = BackgroundColor::getBackgroundColorCode(backgroundColor);
#if defined(OS_WINDOWS)
			m_attributes = getTextColor(m_file);
			SetConsoleTextAttribute(getTerminalHandle(m_file), static_cast<std::uint16_t>((background << 4) + text));
#elif defined(OS_LINUX) or defined(OS_MACOS)
			std::print(m_file, "{}{}", text, background);
			if (textStyle)
				std::print(m_file, "{}", TextStyle::getTextStyleCode(*textStyle));
#endif
		}

		TextModifier(TextModifier&& other) noexcept = default;
		TextModifier& operator=(TextModifier&& other) noexcept = default;

		inline ~TextModifier()
		{
			if (!m_modify)
				return;
#if defined(OS_WINDOWS)
			SetConsoleTextAttribute(getTerminalHandle(m_file), m_attributes);
#elif defined(OS_LINUX) or defined(OS_MACOS)
			std::print(m_file, "{}", ANSIEscapeCode::Reset);
#endif
		}

#if defined(OS_WINDOWS)
		[[nodiscard]] inline static auto getTextColor(std::FILE* file) -> std::uint16_t
		{
			CONSOLE_SCREEN_BUFFER_INFO info;
			if (!GetConsoleScreenBufferInfo(getTerminalHandle(file), &info))
				return 0;
			return info.wAttributes;
		}

		[[nodiscard]] static inline auto getTextColor(std::ostream& stream) -> std::uint16_t
		{
			CONSOLE_SCREEN_BUFFER_INFO info;
			if (!GetConsoleScreenBufferInfo(getTerminalHandle(stream), &info))
				return 0;
			return info.wAttributes;
		}
#endif

		static inline auto eraseCurrentLine([[maybe_unused]] std::FILE* file) -> void
		{
#if defined(OS_LINUX) or defined(OS_MACOS)
			std::fwrite(
				std::data(ANSIEscapeCode::EraseCurrentLine),
				sizeof(decltype(ANSIEscapeCode::EraseCurrentLine)::value_type),
				std::size(ANSIEscapeCode::EraseCurrentLine),
				file);
#endif
		}

		static inline auto moveCursorUp([[maybe_unused]] std::FILE* file) -> void
		{
#if defined(OS_LINUX) or defined(OS_MACOS)
			std::fwrite(
				std::data(ANSIEscapeCode::MoveCursorUp),
				sizeof(decltype(ANSIEscapeCode::MoveCursorUp)::value_type),
				std::size(ANSIEscapeCode::MoveCursorUp),
				file);
#endif
		}

	private:
		bool m_modify = false;
		std::FILE* m_file = nullptr;
#if defined(OS_WINDOWS)
		std::uint16_t m_attributes;
#endif
	};
}
