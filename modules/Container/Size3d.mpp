export module CppUtils.Container.Size3d;

import std;
import CppUtils.Container.Size2d;

export namespace CppUtils::Container
{
	template<std::unsigned_integral T = std::size_t>
	struct Size3d: public Size2d<T>
	{
		inline Size3d() = default;
		inline Size3d(T c_x, T c_y, T c_z):
			Size2d<T>{c_x, c_y},
			z{c_z}
		{}

		T z;
	};

	template<std::unsigned_integral T>
	Size3d(T, T, T) -> Size3d<T>;

	template<std::unsigned_integral T>
	[[nodiscard]] inline constexpr auto operator+(const Size3d<T>& lhs, const Size3d<T>& rhs) noexcept -> auto
	{
		return Size3d<T>{lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z};
	}

	template<std::unsigned_integral T>
	[[nodiscard]] inline constexpr auto operator-(const Size3d<T>& lhs, const Size3d<T>& rhs) noexcept -> auto
	{
		return Size3d<T>{lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z};
	}
}
