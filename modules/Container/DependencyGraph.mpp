export module CppUtils.Container.DependencyGraph;

import std;

export namespace CppUtils::Container
{
	template<class Key, class Value>
	struct DependencyGraph final
	{
	private:
		enum class VisitState
		{
			NotVisited,
			Visiting,
			Visited
		};

	public:
		using KeyType = Key;
		using ValueType = Value;

		struct Node final
		{
			Value value;
			std::vector<Key> dependencies;
		};

		[[nodiscard]] auto contains(const Key& key) const noexcept -> bool
		{
			return nodes.contains(key);
		}

		auto insert(const Key& key, Value&& value) -> void
		{
			nodes[key].value = std::forward<Value>(value);
		}

		auto remove(const Key& key) -> void
		{
			nodes.erase(key);
			for (auto& [_, node] : nodes)
				std::erase(node.dependencies, key);
		}

		[[nodiscard]] auto operator[](const Key& key) const noexcept -> const Value&
		{
			return nodes[key].value;
		}

		[[nodiscard]] auto operator[](const Key& key) noexcept -> Value&
		{
			return nodes[key].value;
		}

		auto addDependency(const Key& key, const Key& dependency) -> void
		{
			nodes[key].dependencies.push_back(dependency);
		}

		auto removeDependency(const Key& key, const Key& dependency) -> void
		{
			std::erase(nodes[key].dependencies, dependency);
		}

		[[nodiscard]] auto getDependencies(const Key& key) const noexcept -> decltype(auto)
		{
			return nodes.at(key).dependencies;
		}

		[[nodiscard]] auto getDependencies(const Key& key) noexcept -> decltype(auto)
		{
			return nodes[key].dependencies;
		}

		auto hasCycle() -> bool
		{
			auto visited = std::unordered_map<Key, VisitState>{};

			auto hasCycle = [&](this const auto& self, const Key& key) -> bool {
				if (auto it = visited.find(key); it != std::cend(visited))
				{
					if (it->second == VisitState::Visiting)
						return true;
					if (it->second == VisitState::Visited)
						return false;
				}

				visited[key] = VisitState::Visiting;

				if (auto found = nodes.find(key); found != std::cend(nodes))
					for (const auto& dep : found->second.dependencies)
						if (self(dep))
							return true;

				visited[key] = VisitState::Visited;
				return false;
			};

			for (const auto& [key, _] : nodes)
				if (hasCycle(key))
					return true;

			return false;
		}

		auto forEach(auto&& function) -> std::expected<void, std::string>
		{
			using namespace std::literals;

			auto visited = std::unordered_map<Key, VisitState>{};

			auto visit = [&](this const auto& self, const Key& key) -> std::expected<void, std::string> {
				if (not nodes.contains(key))
					return std::unexpected{std::format("Dependency {} not found", key)};

				if (visited[key] == VisitState::Visited)
					return {};

				if (visited[key] == VisitState::Visiting)
					return std::unexpected{std::format("Circular dependency on node {}", key)};

				visited[key] = VisitState::Visiting;

				for (const auto& dep : nodes[key].dependencies)
					if (auto result = self(dep); not result) [[unlikely]]
						return result;

				function(key, nodes[key].value, nodes[key].dependencies);
				visited[key] = VisitState::Visited;
				return {};
			};

			for (const auto& [key, _] : nodes)
				if (auto result = visit(key); not result) [[unlikely]]
					return result;
			return {};
		}

		std::unordered_map<Key, Node> nodes;
	};
}
