export module CppUtils.Container.Size2d;

import std;

export namespace CppUtils::Container
{
	template<std::unsigned_integral T = std::size_t>
	struct Size2d
	{
		inline Size2d() = default;
		inline Size2d(T c_x, T c_y):
			x{c_x},
			y{c_y}
		{}

		T x, y;
	};

	template<std::unsigned_integral T>
	Size2d(T, T) -> Size2d<T>;

	template<std::unsigned_integral T>
	[[nodiscard]] inline constexpr auto operator+(const Size2d<T>& lhs, const Size2d<T>& rhs) noexcept -> auto
	{
		return Size2d<T>{lhs.x + rhs.x, lhs.y + rhs.y};
	}

	template<std::unsigned_integral T>
	[[nodiscard]] inline constexpr auto operator-(const Size2d<T>& lhs, const Size2d<T>& rhs) noexcept -> auto
	{
		return Size2d<T>{lhs.x - rhs.x, lhs.y - rhs.y};
	}
}
