export module CppUtils.Container.MeshNetwork;

import std;
import CppUtils.Thread.SharedLocker;
import CppUtils.Container.NetworkPtr;

export namespace CppUtils::Container
{
	template<class Key, class Value>
	struct MeshNode final
	{
		using SharedPtr = NetworkPtr<MeshNode<Key, Value>>::SharedPtr;
		using WeakPtr = NetworkPtr<MeshNode<Key, Value>>::WeakPtr;

		explicit inline MeshNode(auto&&... args):
			value{std::forward<decltype(args)>(args)...}
		{}

		static inline auto attach(SharedPtr& node0, const Key& key1, SharedPtr& node1) -> void
		{
			auto node0Accessor = node0->uniqueAccess();
			node0Accessor->attachChild(node1);
			node0Accessor->value.branches[key1].push_back(node1);
		}

		static inline auto detach(SharedPtr& node0, const Key& key1, SharedPtr& node1) -> void
		{
			auto node0Accessor = node0->uniqueAccess();
			auto& branches = node0Accessor->value.branches;
			auto& childs = branches[key1];
			if (auto it = std::find_if(std::cbegin(childs), std::cend(childs), [&](const auto& child) -> bool {
				return std::shared_ptr{child} == node1;
			});
				it != std::cend(childs))
				childs.erase(it);
			if (std::empty(childs))
				branches.erase(key1);
			node0Accessor->detachChild(node1);
		}

		static inline auto detach(SharedPtr& node, const Key& key) -> void
		{
			auto nodeAccessor = node->uniqueAccess();
			auto& branches = nodeAccessor->value.branches;
			const auto& nodesToDetach = branches[key];
			for (const auto& nodeToDetach : nodesToDetach)
			{
				auto sharedNode = nodeToDetach.lock();
				nodeAccessor->detachChild(sharedNode);
			}
			branches.erase(key);
		}

		static inline auto attach(const Key& key0, SharedPtr& node0, const Key& key1, SharedPtr& node1) -> void
		{
			attach(node0, key1, node1);
			attach(node1, key0, node0);
		}

		static inline auto detach(const Key& key0, SharedPtr& node0, const Key& key1, SharedPtr& node1) -> void
		{
			detach(node0, key1, node1);
			detach(node1, key0, node0);
		}

		Value value;
		std::unordered_map<Key, std::vector<WeakPtr>> branches;
	};

	template<class Key, class Value>
	using MeshNodePtr = NetworkPtr<MeshNode<Key, Value>>;
}
