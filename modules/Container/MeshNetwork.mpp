export module CppUtils.Container.MeshNetwork;

import std;
import CppUtils.Container.Vector;

export namespace CppUtils::Container
{
	template<class Key, class Value>
	class MeshNetwork final
	{
	public:
		class Node final
		{
		public:
			explicit inline Node(std::string c_value):
				value{std::move(c_value)}
			{}

			[[nodiscard]] inline auto exists(const Key& branchKey) const -> bool
			{
				return m_branchs.find(branchKey) != std::cend(m_branchs);
			}

			[[nodiscard]] inline auto get(const Key& key) const -> const std::vector<std::reference_wrapper<Node>>&
			{
				if (!exists(key))
					throw std::out_of_range("The branch does not exist in the Node.");
				return m_branchs.at(key);
			}

			[[nodiscard]] inline auto operator[](const Key& key) -> std::vector<std::reference_wrapper<Node>>&
			{
				if (!exists(key))
					m_branchs[key] = std::vector<std::reference_wrapper<Node>>{};
				return m_branchs[key];
			}

			[[nodiscard]] inline auto count(const Key& key) const -> std::size_t
			{
				return exists(key) ? std::size(get(key)) : 0uz;
			}

			inline auto attach(const Key& key, Node& node) -> void
			{
				m_branchs[key].push_back(std::ref(node));
				node.m_parentBranchs.push_back(std::ref(*this));
			}

			inline auto attachUnique(const Key& key, Node& node) -> void
			{
				auto& nodes = (*this)[key];
				if (auto nodeIt = std::find_if(std::cbegin(nodes), std::cend(nodes), [&value = node.value](const auto& node) -> bool { return node.get().value == value; });
					nodeIt == std::cend(nodes))
					nodes.push_back(std::ref(node));
				else
				{
					auto& destNode = nodeIt->get();
					destNode.m_branchs.insert(std::begin(node.m_branchs), std::end(node.m_branchs));
					destNode.m_parentBranchs.insert(std::end(destNode.m_parentBranchs), std::begin(node.m_parentBranchs), std::end(node.m_parentBranchs));
				}
			}

			inline auto detach(const Key& key, Node& node) -> void
			{
				auto& branch = m_branchs[key];
				for (auto& targetNode : branch)
					std::erase_if(targetNode.get().m_parentBranchs, [this](const auto& parentBranch) -> bool { return &parentBranch.get() == this; });
				std::erase(branch, std::ref(node));
				if (std::empty(branch))
					m_branchs.erase(key);
			}

			inline auto detach(const Key& key) -> void
			{
				auto& branch = m_branchs[key];
				for (auto& targetNode : branch)
					std::erase_if(targetNode.get().m_parentBranchs, [this](const auto& parentBranch) -> bool { return &parentBranch.get() == this; });
				m_branchs.erase(key);
			}

			inline auto detachAll() -> void
			{
				for (auto& [key, branch] : m_branchs)
					for (auto& targetNode : branch)
						std::erase_if(targetNode.get().m_parentBranchs, [this](const auto& parentBranch) -> bool { return &parentBranch.get() == this; });
				m_branchs.clear();
			}

			inline auto detachFromAll() -> void
			{
				for (auto& targetNodes : m_parentBranchs)
					for (auto& [key, branch] : targetNodes.get().m_branchs)
						std::erase_if(branch, [this](const auto& node) -> bool { return &node.get() == this; });
				m_parentBranchs.clear();
			}

			Value value;

		private:
			std::unordered_map<Key, std::vector<std::reference_wrapper<Node>>> m_branchs;
			std::vector<std::reference_wrapper<Node>> m_parentBranchs;
		};

		static inline auto attach(const Key& key0, Node& node0, const Key& key1, Node& node1) -> void
		{
			node1.attach(key0, node0);
			node0.attach(key1, node1);
		}

		[[nodiscard]] inline auto newNode(auto&&... args) -> Node&
		{
			return *m_nodes.emplace_back(std::make_unique<Node>(std::forward<decltype(args)>(args)...));
		}

		inline auto deleteNode(Node& node) -> void
		{
			node.detachAll();
			node.detachFromAll();
			std::erase_if(m_nodes, [nodeAddress = &node](const auto& node) -> bool { return node.get() == nodeAddress; });
		}

		[[nodiscard]] inline auto size() const -> std::size_t
		{
			return std::size(m_nodes);
		}

		[[nodiscard]] inline auto empty() const -> bool
		{
			return size() == 0;
		}

	private:
		std::vector<std::unique_ptr<Node>> m_nodes;
	};

	/*
	template<bool doubleLinked, class Key, class Value, class Hash = std::hash<Key>>
	requires std::is_integral_v<Key>
	class FragmentedMeshNetwork: public MeshNetwork<Key, Value, Hash>
	{
	public:
		using Node = MeshNode<Key, Value, Hash>;

		enum Branch : Key
		{
			Last,
			Next
		};

		template<class Type>
		[[nodiscard]] inline auto newChain(Type data) -> std::shared_ptr<Node>
		{
			static_assert(sizeof(Type) >= sizeof(Value));
			static_assert(sizeof(Type) % sizeof(Value) == 0);
			auto firstNode = this->newNode(*reinterpret_cast<Value*>(&data)), lastNode = firstNode;
			for (auto i = 1uz; i * sizeof(Value) < sizeof(Type); ++i)
			{
				auto nextNode = this->newNode(*reinterpret_cast<Value*>(&data + i * sizeof(Value)));
				(doubleLinked ? Node::attach(Last, lastNode, Next, nextNode) : lastNode->attach(Next, nextNode));
				lastNode = nextNode;
			}
			return firstNode;
		}

		template<class Type>
		[[nodiscard]] inline auto getBranchOrDefault(const std::shared_ptr<Node>& baseNode, Key branchKey, Type&& defaultValue) -> std::shared_ptr<Node>
		{
			if (!baseNode->exists(branchKey))
				baseNode->attach(branchKey, newChain(std::move(defaultValue)));
			return std::shared_ptr<Node>{(*baseNode)[branchKey][0]};
		}

		template<class Type>
		[[nodiscard]] inline auto getBranchOrDefault(Key baseKey, const std::shared_ptr<Node>& baseNode, Key branchKey, Type&& defaultValue) -> std::shared_ptr<Node>
		{
			if (!baseNode->exists(branchKey))
				Node::attach(baseKey, baseNode, branchKey, newChain(std::move(defaultValue)));
			return std::shared_ptr<Node>{(*baseNode)[branchKey][0]};
		}
	};
	*/
}
