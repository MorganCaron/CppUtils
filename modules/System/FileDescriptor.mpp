module;

#include <CppUtils/System/OS.hpp>

#if defined(OS_LINUX)
#	include <unistd.h>
#endif

export module CppUtils.System.FileDescriptor;

import std;
import CppUtils.System.Errno;

export namespace CppUtils::System
{
#if defined(OS_LINUX)
	class FileDescriptor final
	{
	public:
		inline FileDescriptor() = default;

		explicit inline FileDescriptor(int fileDescriptor):
			m_fileDescriptor{throwErrno(fileDescriptor)}
		{}
		FileDescriptor(const FileDescriptor&) = default;
		FileDescriptor(FileDescriptor&& other) noexcept:
			m_fileDescriptor{std::exchange(other.m_fileDescriptor, -1)}
		{}
		FileDescriptor& operator=(const FileDescriptor&) = default;
		FileDescriptor& operator=(FileDescriptor&& rhs) noexcept
		{
			m_fileDescriptor = std::exchange(rhs.m_fileDescriptor, -1);
			return *this;
		}

		inline ~FileDescriptor()
		{
			close();
		}

		[[nodiscard]] inline constexpr auto get() const noexcept -> int
		{
			return m_fileDescriptor;
		}

		[[nodiscard]] inline constexpr auto release() noexcept -> int
		{
			return std::exchange(m_fileDescriptor, -1);
		}

		inline auto close() -> void
		{
			if (m_fileDescriptor != -1)
				throwErrno(::close(m_fileDescriptor));
			m_fileDescriptor = -1;
		}

		inline constexpr auto operator=(int fileDescriptor)
		{
			close();
			m_fileDescriptor = fileDescriptor;
		}

		[[nodiscard]] constexpr operator int() const noexcept
		{
			return m_fileDescriptor;
		}

	private:
		int m_fileDescriptor = -1;
	};
#endif
}
