module;

#include <cstdio>

export module CppUtils.UnitTest;

import std;
import CppUtils.Chrono.Concept;
import CppUtils.ChronoLogger;
import CppUtils.Container;
import CppUtils.Logger;
import CppUtils.String;
import CppUtils.Terminal;
import CppUtils.System.Main;

export import CppUtils.UnitTest.DummyObject;

namespace CppUtils::UnitTest
{
	export struct TestSettings final
	{
		bool verbose = true;
		bool detail = true;
		bool chrono = false;
		bool fastAbort = false;
	};

	struct Test final
	{
		std::string name;
		std::function<void()> function;
	};

	class TestException: public std::runtime_error
	{
	public:
		inline TestException(std::string message):
			std::runtime_error{std::move(message)}
		{}
	};

	class TestRunner final
	{
	public:
		inline auto addTestSuite(const std::string& name, std::vector<Test> tests) -> void
		{
			for (auto& test : tests)
				test.name = std::format("{}/{}", name, test.name);
			m_testSuites.insert(name, std::move(tests));
		}

		inline auto addTestSuite(const std::string& name, std::vector<std::string> prerequisites, std::vector<Test> tests) -> void
		{
			addTestSuite(name, tests);
			for (const auto& prerequisite : prerequisites)
				m_testSuites.addDependency(name, prerequisite);
		}

		inline auto executeTest(const Test& test, const TestSettings& settings) const -> bool
		{
			using namespace std::literals;
			using namespace String::Literals;
			using Logger = Logger<"CppUtils">;

			if (settings.verbose)
			{
				Logger::printSeparator<"detail">();
				Logger::print<"detail">("{}:", test.name);
			}
			try
			{
				try
				{
					auto chronoLogger = Log::ChronoLogger{"Test", settings.verbose and settings.chrono};
					test.function();
				}
				catch (const TestException&)
				{
					std::throw_with_nested(std::runtime_error{std::format("The following test didn't pass:\n{}", test.name)});
				}
				catch (const std::exception& exception)
				{
					std::throw_with_nested(std::runtime_error{std::format("An exception occurred during the test:\n{}\n{}", test.name, exception.what())});
				}
			}
			catch (const std::exception& exception)
			{
				logException(exception);
				return false;
			}
			if (settings.verbose)
				Logger::print<"success">("Passed");
			return true;
		}

		inline auto executeTests(TestSettings settings) -> int
		{
			using Logger = Logger<"CppUtils">;

			auto testSuiteIsSuccess = std::unordered_map<std::string, bool>{};

			const auto nbTests = std::ranges::fold_left(
				std::views::values(m_testSuites.nodes) | std::views::transform([](auto&& node) { return std::ranges::size(node.value); }),
				0uz,
				std::plus{});
			Logger::print<"info">("{} tests found. Execution:", nbTests);

			auto successfulTests = std::vector<std::string>{};
			auto failedTests = std::vector<std::string>{};

			if (auto result = m_testSuites.forEach([&](const auto& name, const auto& tests, const auto& dependencies) -> bool {
				if (std::empty(tests))
				{
					Logger::print<"warning">("No tests found in test suite {}", name);
					testSuiteIsSuccess[name] = true;
					successfulTests.push_back(name);
					return not settings.fastAbort;
				}

				for (const auto& dependency : dependencies)
					if (not testSuiteIsSuccess[dependency])
						Logger::print<"warning">("Skipping test suite {} due to failed prerequisites in test suite {}", name, dependency);

				auto result = std::ranges::all_of(tests, [&](const auto& test) { return executeTest(test, settings); });
				testSuiteIsSuccess[name] = result;
				(result ? successfulTests : failedTests).push_back(name);
				return result or not settings.fastAbort;
			});
				not result)
				Logger::print<"error">("The tests cannot be run: {}", result.error());

			auto nbSuccess = std::size(successfulTests);
			auto nbFail = std::size(failedTests);

			Logger::printSeparator<"detail">();
			Logger::print<"detail">("Test results");
			if (nbFail == 0)
			{
				Logger::print<"success">("All tests passed successfully");
				return exitSuccess;
			}
			{
				auto _ = Terminal::TextModifier{stdout, Terminal::TextColor::TextColorEnum::Red};
				Logger::print("The tests failed:\n");
			}
			if (nbSuccess > 0)
				Logger::print<"success">("- {} successful tests", nbSuccess);
			auto _ = Terminal::TextModifier{stdout, Terminal::TextColor::TextColorEnum::Red};
			if (nbSuccess == 0)
				Logger::print("- 0 successful tests\n");
			Logger::print("- {} failed tests\n", nbFail);
			for (const auto& failedTest : failedTests)
				Logger::print("  - {}\n", failedTest);
			return exitFailure;
		}

	private:
		Container::DependencyGraph<std::string, std::vector<Test>> m_testSuites;
	};

	inline /* constinit */ auto testRunner = TestRunner{};

	export struct TestSuite final
	{
		using Logger = CppUtils::Logger<"CppUtils">;

		inline explicit TestSuite(const std::string& name, std::vector<std::string> prerequisites, std::function<void(TestSuite&)> function)
		{
			function(*this);
			testRunner.addTestSuite(name, prerequisites, std::move(tests));
		}

		inline explicit TestSuite(std::string name, std::function<void(TestSuite&)> function)
		{
			function(*this);
			testRunner.addTestSuite(name, std::move(tests));
		}

		inline auto addTest(std::string name, std::function<void()> function) -> void
		{
			tests.emplace_back(std::move(name), function);
		}

		// Todo C++23: std::stacktrace stacktrace = std::current_stacktrace()
		inline auto expect(bool condition, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			if (not condition) [[unlikely]]
				throw TestException{std::format("In {}\nAt line {}, column {}\nIn expect(condition)",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column())};
		}

		inline auto expectEqual(const auto& lhs, const auto& rhs, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			if (lhs != rhs) [[unlikely]]
				throw TestException{std::format("In {}\nAt line {}, column {}\nIn expectEqual(lhs, rhs)\nwith lhs:\n{}\nand rhs:\n{}",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column(),
					String::formatValue(lhs),
					String::formatValue(rhs))};
		}

		template<class ExceptionType>
		inline auto expectThrow(auto&& function, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			try
			{
				function();
				throw TestException{std::format("In {}\nAt line {}, column {}\nExpected throw of type {}, but no exception was thrown.",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column(),
					typeid(ExceptionType).name())};
			}
			catch (const ExceptionType&)
			{
				Logger::print<"success">("Expected exception caught.");
			}
			catch (const std::exception& exception)
			{
				throw TestException{std::format("In {}\nAt line {}, column {}\nExpected throw of type {}, but caught different exception: {}",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column(),
					typeid(ExceptionType).name(),
					exception.what())};
			}
		}

		inline auto expectNoThrow(auto&& function, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			try
			{
				function();
			}
			catch (const std::exception& exception)
			{
				throw TestException{std::format("In {}\nAt line {}, column {}\nExpected no throw, but an exception was thrown: {}",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column(),
					exception.what())};
			}
		}

		std::vector<Test> tests;
	};

	export inline auto executeTests(TestSettings settings) -> int
	{
		return testRunner.executeTests(std::move(settings));
	}
}
