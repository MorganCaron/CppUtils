module;

#include <cstdio>

export module CppUtils.UnitTest;

import std;
import CppUtils.Chrono.Concept;
import CppUtils.ChronoLogger;
import CppUtils.Logger;
import CppUtils.String;
import CppUtils.Terminal;
export import CppUtils.UnitTest.DummyObject;

namespace
{
	inline constexpr auto exitSuccess = 0;
	inline constexpr auto exitFailure = 1;
}

namespace CppUtils::UnitTest
{
	export struct TestSettings final
	{
		bool verbose = true;
		bool detail = true;
		bool failFast = true;
		bool chrono = false;
		bool abort = false;
		std::string filter;
	};

	struct Test final
	{
		std::string name;
		std::function<void()> function;
	};

	class TestException: public std::runtime_error
	{
	public:
		inline TestException(std::string message):
			std::runtime_error{std::move(message)}
		{}
	};

	class TestRunner final
	{
	public:
		struct TestSuiteData final
		{
			std::string name;
			std::vector<std::string> prerequisites;
			std::vector<Test> tests;
		};

		inline auto addTestSuite(TestSuiteData testSuite) -> void
		{
			for (auto& test : testSuite.tests)
				test.name = std::format("{}/{}", testSuite.name, test.name);
			m_testSuites.push_back(std::move(testSuite));
		}

		inline auto executeTest(const Test& test, const TestSettings& settings) const -> bool
		{
			using namespace std::literals;
			using namespace String::Literals;
			using Logger = Logger<"CppUtils">;

			if (settings.verbose)
			{
				Logger::printSeparator<"detail">();
				Logger::print<"detail">("{}:", test.name);
			}
			try
			{
				try
				{
					auto chronoLogger = Log::ChronoLogger{"Test", settings.verbose and settings.chrono};
					test.function();
				}
				catch (const TestException&)
				{
					std::throw_with_nested(std::runtime_error{std::format("The following test didn't pass:\n{}", test.name)});
				}
				catch (const std::exception& exception)
				{
					std::throw_with_nested(std::runtime_error{std::format("An exception occurred during the test:\n{}\n{}", test.name, exception.what())});
				}
			}
			catch (const std::exception& exception)
			{
				logException(exception);
				return false;
			}
			if (settings.verbose)
				Logger::print<"success">("Passed");
			return true;
		}

		inline auto executeTests(TestSettings settings) -> int
		{
			using Logger = Logger<"CppUtils">;

			auto remainingTestSuites = m_testSuites;
			auto isTestFiltered = [&settings](const auto& test) -> bool {
				return not test.name.starts_with(settings.filter);
			};
			if (not std::empty(settings.filter))
			{
				std::erase_if(remainingTestSuites, isTestFiltered);
				for (auto& testSuite : remainingTestSuites)
					std::erase_if(testSuite.tests, isTestFiltered);
			}
			std::erase_if(remainingTestSuites, [](const auto& testSuite) -> bool {
				auto testSuiteIsEmpty = std::empty(testSuite.tests);
				if (testSuiteIsEmpty)
					Logger::print<"warning">("No tests found in test suite {}", testSuite.name);
				return testSuiteIsEmpty;
			});

			if (std::empty(remainingTestSuites))
			{
				Logger::print<"warning">("No tests found.");
				if (std::empty(settings.filter))
					Logger::print<"detail">("Create a unit test.");
				else
					Logger::print<"detail">("Create a unit test or adjust the filter.");
				return exitFailure;
			}

			const auto nbTests = std::ranges::fold_left(remainingTestSuites, 0uz, [](const auto& nbTests, const auto& testSuite) -> auto {
				return nbTests + std::size(testSuite.tests);
			});
			Logger::print<"info">("{} tests found. Execution:", nbTests);
			auto remainingPrerequisites = std::unordered_map<std::string, std::unordered_set<std::string>>{};
			for (const auto& testSuite : remainingTestSuites)
			{
				if (remainingPrerequisites.contains(testSuite.name))
					Logger::print<"warning">("Duplicate test suite name: {}", testSuite.name);
				remainingPrerequisites[testSuite.name] = std::unordered_set<std::string>{};
			}
			auto successfulTests = std::vector<std::string_view>{};
			auto failedTests = std::vector<std::string_view>{};
			auto filteredTests = std::vector<std::string_view>{};
			auto endTests = false;
			while (not endTests and not std::empty(remainingTestSuites))
			{
				for (auto i = 0uz; not endTests and i < std::size(remainingTestSuites);)
				{
					const auto& testSuite = remainingTestSuites[i];
					if (const auto& testPrerequisites = remainingPrerequisites[testSuite.name];
						not std::empty(testPrerequisites))
					{
						++i;
						continue;
					}
					for (const auto& test : testSuite.tests)
					{
						if (executeTest(test, settings))
						{
							successfulTests.push_back(test.name);
							for (auto& remainingTestSuite : remainingTestSuites)
								std::erase(remainingTestSuite.prerequisites, test.name);
						}
						else
						{
							failedTests.push_back(test.name);
							if (settings.failFast)
							{
								if (settings.detail)
									Logger::print<"detail">("Stopping tests execution (failFast mode enabled)");
								endTests = true;
								break;
							}
							auto disableTest = [&](this const auto& self, const auto& testName) -> void {
								filteredTests.push_back(testName);
								for (auto& remainingTestSuite : remainingTestSuites)
									if (std::ranges::contains(remainingTestSuite.prerequisites, testName))
									{
										self(remainingTestSuite.name);
										Logger::print<"warning">("Skipping test {} due to failed prerequisites in test suite {}", testName, remainingTestSuite.name);
									}
								i -= std::erase_if(remainingTestSuites, [&](const auto& testSuite) -> bool {
									return std::ranges::contains(testSuite.prerequisites, testName);
								});
							};
							disableTest(test.name);
						}
					}
					remainingTestSuites.erase(std::next(std::cbegin(remainingTestSuites), static_cast<std::ptrdiff_t>(i)));
				}
			}

			auto nbSuccess = std::size(successfulTests);
			auto nbFail = std::size(failedTests);
			auto nbFiltered = std::size(remainingTestSuites);
			Logger::printSeparator<"detail">();
			Logger::print<"detail">("Test results");
			if (nbFail == 0)
			{
				Logger::print<"success">("All tests passed successfully");
				return exitSuccess;
			}
			{
				[[maybe_unused]] auto textModifier = Terminal::TextModifier{stdout, Terminal::TextColor::TextColorEnum::Red};
				Logger::print("The tests failed:\n");
			}
			if (nbSuccess > 0)
				Logger::print<"success">("- {} successful tests", nbSuccess);
			[[maybe_unused]] auto textModifier = Terminal::TextModifier{stdout, Terminal::TextColor::TextColorEnum::Red};
			if (nbSuccess == 0)
				Logger::print("- 0 successful tests\n");
			Logger::print("- {} failed tests\n", nbFail);
			if (nbFiltered > 0)
				Logger::print("- {} filtered tests\n", nbFiltered);
			return exitFailure;
		}

	private:
		std::vector<TestSuiteData> m_testSuites;
	};

	inline constinit auto testRunner = TestRunner{};

	export class ExpectedCall final
	{
	public:
		inline auto call() -> void
		{
			m_promise.set_value();
		}

		inline auto wait_for(const Chrono::Duration auto& timeout) -> std::future_status
		{
			return m_promise.get_future().wait_for(timeout);
		}

	private:
		std::promise<void> m_promise;
	};

	export struct TestSuite final
	{
		inline explicit TestSuite(std::string name, std::vector<std::string> prerequisites, std::function<void(TestSuite&)> function)
		{
			function(*this);
			testRunner.addTestSuite(TestRunner::TestSuiteData{std::move(name), std::move(prerequisites), std::move(tests)});
		}

		inline explicit TestSuite(std::string name, std::function<void(TestSuite&)> function):
			TestSuite{std::move(name), {}, std::move(function)}
		{}
		
		inline auto addTest(std::string name, std::function<void()> function) -> void
		{
			tests.emplace_back(std::move(name), function);
		}

		// Todo C++23: std::stacktrace stacktrace = std::current_stacktrace()
		inline auto expect(bool condition, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			if (not condition) [[unlikely]]
				throw TestException{std::format("In {}\nAt line {}, column {}\nIn expect(condition)",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column())};
		}

		inline auto expectEqual(const auto& lhs, const auto& rhs, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			if (lhs != rhs) [[unlikely]]
				throw TestException{std::format("In {}\nAt line {}, column {}\nIn expectEqual(lhs, rhs)\nwith lhs:\n{}\nand rhs:\n{}",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column(),
					String::formatValue(lhs),
					String::formatValue(rhs))};
		}

		inline auto expectCall(ExpectedCall& expectedCall, const Chrono::Duration auto& timeout, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			if (expectedCall.wait_for(timeout) != std::future_status::ready)
				throw TestException{std::format("In {}\nAt line {}, column {}\nIn expectCall(expectedCall, timeout)",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column())};
		}

		inline auto expectCall(ExpectedCall& expectedCall, std::source_location sourceLocation = std::source_location::current()) -> void
		{
			if (expectedCall.wait_for(std::chrono::milliseconds::zero()) != std::future_status::ready)
				throw TestException{std::format("In {}\nAt line {}, column {}\nIn expectCall(expectedCall)",
					sourceLocation.file_name(),
					sourceLocation.line(),
					sourceLocation.column())};
		}

		std::vector<Test> tests;
	};

	export inline auto executeTests(TestSettings settings) -> int
	{
		return testRunner.executeTests(std::move(settings));
	}
}
