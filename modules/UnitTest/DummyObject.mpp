export module CppUtils.UnitTest.DummyObject;

import std;
import CppUtils.Logger;

export namespace CppUtils::UnitTest
{
	class DummyObject
	{
		using Logger = CppUtils::Logger<"CppUtils">;

	public:
		explicit inline DummyObject(std::string name, std::size_t indentationLevel = 0):
			m_name{std::move(name)},
			m_indentationLevel{indentationLevel}
		{
			Logger::print("{}{}()\n", std::string(m_indentationLevel, '\t'), m_name);
		}

		inline virtual ~DummyObject()
		{
			Logger::print("{}~{}()\n", std::string(m_indentationLevel, '\t'), m_name);
		}

		inline DummyObject(const DummyObject& other)
		{
			m_name = other.m_name;
			m_indentationLevel = other.m_indentationLevel;
			Logger::print("{}{}(const {}&)\n", std::string(m_indentationLevel, '\t'), m_name, m_name);
		}

		inline DummyObject(DummyObject&& other)
		{
			m_name = other.m_name;
			m_indentationLevel = other.m_indentationLevel;
			other.m_name += " [invalid object]";
			Logger::print("{}{}({}&&)\n", std::string(m_indentationLevel, '\t'), m_name, m_name);
		}

		inline auto operator=(const DummyObject& rhs) -> DummyObject&
		{
			m_name = rhs.m_name;
			m_indentationLevel = rhs.m_indentationLevel;
			Logger::print("{}{}::operator=(const {}&)\n", std::string(m_indentationLevel, '\t'), m_name, m_name);
			return *this;
		}

		inline auto operator=(DummyObject&& rhs) -> DummyObject&
		{
			m_name = rhs.m_name;
			m_indentationLevel = rhs.m_indentationLevel;
			rhs.m_name += " [invalid object]";
			Logger::print("{}{}::operator=({}&&)\n", std::string(m_indentationLevel, '\t'), m_name, m_name);
			return *this;
		}

	private:
		std::string m_name;
		std::size_t m_indentationLevel;
	};
}
