name: "CI C++: Test execution"

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.os.name }} (${{ matrix.compiler }}, ${{ matrix.library-type }})
    runs-on: ${{ matrix.os.value }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - {
          name: "Windows",
          value: windows-latest,
          install-ninja: choco install ninja
        }
        - {
          name: "Ubuntu",
          value: ubuntu-latest,
          install-ninja: sudo apt install -yq --no-install-recommends ninja-build libxt-dev libxpm-dev libxaw7-dev
        }
        - {
          name: "MacOS",
          value: macos-latest,
          install-ninja: brew install ninja
        }
        compiler: [g++, clang++]
        library-type: [static, shared]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      if: ${{ matrix.os.name != 'Windows' }}
      with:
        python-version: '3.x'
    - uses: haya14busa/action-cond@v1
      id: compiler
      with:
        cond: ${{ matrix.os.name == 'Ubuntu' && matrix.compiler == 'g++' }}
        if_true: 'g++-9'
        if_false: ${{ matrix.compiler }}
    - uses: msys2/setup-msys2@v2
      if: ${{ matrix.os.name == 'Windows' }}
      with:
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
    - name: Install Meson
      if: ${{ matrix.os.name != 'Windows' }}
      run: pip install meson
    - name: Install Ninja
      if: ${{ matrix.os.name != 'Windows' }}
      run: ${{ matrix.os.install-ninja }}
    - name: Compile and Run on Windows
      shell: msys2 {0}
      if: ${{ matrix.os.name == 'Windows' }}
      env:
        CXX: ${{ steps.compiler.outputs.value }}
      run: |
        meson build -Ddefault_library=${{ matrix.library-type }}
        ninja -C build
        if [ ${{ matrix.library-type }} == "shared" ]; then
          cp ./build/External/libCppUtils-External.dll ./build/UnitTests
          cp ./build/Log/libCppUtils-Log.dll ./build/UnitTests
          cp ./build/Type/libCppUtils-Type.dll ./build/UnitTests
        fi
        ./build/UnitTests/UnitTests
        ninja -C build test
    - name: Compile and Run on Ubuntu/MacOS
      if: ${{ matrix.os.name != 'Windows' }}
      env:
        CXX: ${{ steps.compiler.outputs.value }}
        LDFLAGS: '-ldl'
      run: |
        meson build -Ddefault_library=${{ matrix.library-type }}
        ninja -C build
        ./build/UnitTests/UnitTests
        ninja -C build test
