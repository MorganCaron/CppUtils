name: "CI C++: Windows"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.os.name }} (${{ matrix.compiler.cxx }}, ${{ matrix.library-type }})
    runs-on: ${{ matrix.os.value }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - {
          name: "Windows",
          value: windows-latest
        }
        compiler:
        - {
          cc: "cl",
          cxx: "cl"
        }
        library-type: [static, shared]
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install Meson ans Ninja
      run: pip3 install meson ninja
    - name: Compile
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
        LDFLAGS: '-ldl'
      run: |
        meson build -Ddefault_library=${{ matrix.library-type }} -Dcpp_std=vc++latest -Dcpp_args='/DNOMINMAX'
        ninja -C build -j7
    - name: Move DLLs
      if: ${{ matrix.library-type == 'shared' }}
      run: |
        cp ./build/External/libCppUtils-External.dll ./build/UnitTests
        cp ./build/Terminal/libCppUtils-Terminal.dll ./build/UnitTests
        cp ./build/Log/libCppUtils-Log.dll ./build/UnitTests
        cp ./build/Type/libCppUtils-Type.dll ./build/UnitTests
    - name: Run tests
      run: |
        ./build/UnitTests/UnitTests
        ninja -C build test
